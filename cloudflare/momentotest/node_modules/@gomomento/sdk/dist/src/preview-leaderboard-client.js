"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewLeaderboardClient = void 0;
const leaderboard_data_client_1 = require("./internal/leaderboard-data-client");
const leaderboard_1 = require("./internal/leaderboard");
const index_1 = require("./index");
/**
 * PREVIEW Momento Leaderboard Client
 * WARNING: the API for this client is not yet stable and may change without notice.
 * Please contact Momento if you would like to try this preview.
 *
 * Leaderboard methods return a response object unique to each request.
 * The response object is resolved to a type-safe object of one of several
 * sub-types. See the documentation for each response type for details.
 */
class PreviewLeaderboardClient {
    constructor(props) {
        var _a;
        const configuration = (_a = props.configuration) !== null && _a !== void 0 ? _a : getDefaultLeaderboardConfiguration();
        const propsWithConfig = {
            ...props,
            configuration: configuration,
        };
        this.logger = configuration.getLoggerFactory().getLogger(this);
        this.logger.debug('Creating Momento LeaderboardClient');
        this.dataClient = new leaderboard_data_client_1.LeaderboardDataClient(propsWithConfig, '0'); // only creating one leaderboard client
    }
    /**
     * Creates an instance of LeaderboardClient with 32-bit float scores.
     */
    leaderboard(cacheName, leaderboardName) {
        return new leaderboard_1.Leaderboard(this.dataClient, cacheName, leaderboardName);
    }
}
exports.PreviewLeaderboardClient = PreviewLeaderboardClient;
function getDefaultLeaderboardConfiguration() {
    return index_1.LeaderboardConfigurations.Laptop.latest();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy1sZWFkZXJib2FyZC1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJldmlldy1sZWFkZXJib2FyZC1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBS0EsZ0ZBQXlFO0FBRXpFLHdEQUFtRDtBQUVuRCxtQ0FBNEU7QUFHNUU7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFhLHdCQUF3QjtJQUluQyxZQUFZLEtBQTZCOztRQUN2QyxNQUFNLGFBQWEsR0FDakIsTUFBQSxLQUFLLENBQUMsYUFBYSxtQ0FBSSxrQ0FBa0MsRUFBRSxDQUFDO1FBQzlELE1BQU0sZUFBZSxHQUFxQztZQUN4RCxHQUFHLEtBQUs7WUFDUixhQUFhLEVBQUUsYUFBYTtTQUM3QixDQUFDO1FBRUYsSUFBSSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksK0NBQXFCLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsdUNBQXVDO0lBQzVHLENBQUM7SUFFRDs7T0FFRztJQUNJLFdBQVcsQ0FBQyxTQUFpQixFQUFFLGVBQXVCO1FBQzNELE9BQU8sSUFBSSx5QkFBVyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Q0FDRjtBQXZCRCw0REF1QkM7QUFFRCxTQUFTLGtDQUFrQztJQUN6QyxPQUFPLGlDQUF5QixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTW9tZW50b0xvZ2dlcixcbiAgSUxlYWRlcmJvYXJkQ2xpZW50LFxuICBJTGVhZGVyYm9hcmQsXG59IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUnO1xuaW1wb3J0IHtMZWFkZXJib2FyZERhdGFDbGllbnR9IGZyb20gJy4vaW50ZXJuYWwvbGVhZGVyYm9hcmQtZGF0YS1jbGllbnQnO1xuaW1wb3J0IHtMZWFkZXJib2FyZENsaWVudFByb3BzfSBmcm9tICcuL2xlYWRlcmJvYXJkLWNsaWVudC1wcm9wcyc7XG5pbXBvcnQge0xlYWRlcmJvYXJkfSBmcm9tICcuL2ludGVybmFsL2xlYWRlcmJvYXJkJztcbmltcG9ydCB7SUxlYWRlcmJvYXJkRGF0YUNsaWVudH0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZS9kaXN0L3NyYy9pbnRlcm5hbC9jbGllbnRzL2xlYWRlcmJvYXJkL0lMZWFkZXJib2FyZERhdGFDbGllbnQnO1xuaW1wb3J0IHtMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24sIExlYWRlcmJvYXJkQ29uZmlndXJhdGlvbnN9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHtMZWFkZXJib2FyZENsaWVudFByb3BzV2l0aENvbmZpZ30gZnJvbSAnLi9pbnRlcm5hbC9sZWFkZXJib2FyZC1jbGllbnQtcHJvcHMtd2l0aC1jb25maWcnO1xuXG4vKipcbiAqIFBSRVZJRVcgTW9tZW50byBMZWFkZXJib2FyZCBDbGllbnRcbiAqIFdBUk5JTkc6IHRoZSBBUEkgZm9yIHRoaXMgY2xpZW50IGlzIG5vdCB5ZXQgc3RhYmxlIGFuZCBtYXkgY2hhbmdlIHdpdGhvdXQgbm90aWNlLlxuICogUGxlYXNlIGNvbnRhY3QgTW9tZW50byBpZiB5b3Ugd291bGQgbGlrZSB0byB0cnkgdGhpcyBwcmV2aWV3LlxuICpcbiAqIExlYWRlcmJvYXJkIG1ldGhvZHMgcmV0dXJuIGEgcmVzcG9uc2Ugb2JqZWN0IHVuaXF1ZSB0byBlYWNoIHJlcXVlc3QuXG4gKiBUaGUgcmVzcG9uc2Ugb2JqZWN0IGlzIHJlc29sdmVkIHRvIGEgdHlwZS1zYWZlIG9iamVjdCBvZiBvbmUgb2Ygc2V2ZXJhbFxuICogc3ViLXR5cGVzLiBTZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIGVhY2ggcmVzcG9uc2UgdHlwZSBmb3IgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNsYXNzIFByZXZpZXdMZWFkZXJib2FyZENsaWVudCBpbXBsZW1lbnRzIElMZWFkZXJib2FyZENsaWVudCB7XG4gIHByb3RlY3RlZCByZWFkb25seSBsb2dnZXI6IE1vbWVudG9Mb2dnZXI7XG4gIHByaXZhdGUgZGF0YUNsaWVudDogSUxlYWRlcmJvYXJkRGF0YUNsaWVudDtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogTGVhZGVyYm9hcmRDbGllbnRQcm9wcykge1xuICAgIGNvbnN0IGNvbmZpZ3VyYXRpb24gPVxuICAgICAgcHJvcHMuY29uZmlndXJhdGlvbiA/PyBnZXREZWZhdWx0TGVhZGVyYm9hcmRDb25maWd1cmF0aW9uKCk7XG4gICAgY29uc3QgcHJvcHNXaXRoQ29uZmlnOiBMZWFkZXJib2FyZENsaWVudFByb3BzV2l0aENvbmZpZyA9IHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgY29uZmlndXJhdGlvbjogY29uZmlndXJhdGlvbixcbiAgICB9O1xuXG4gICAgdGhpcy5sb2dnZXIgPSBjb25maWd1cmF0aW9uLmdldExvZ2dlckZhY3RvcnkoKS5nZXRMb2dnZXIodGhpcyk7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoJ0NyZWF0aW5nIE1vbWVudG8gTGVhZGVyYm9hcmRDbGllbnQnKTtcbiAgICB0aGlzLmRhdGFDbGllbnQgPSBuZXcgTGVhZGVyYm9hcmREYXRhQ2xpZW50KHByb3BzV2l0aENvbmZpZywgJzAnKTsgLy8gb25seSBjcmVhdGluZyBvbmUgbGVhZGVyYm9hcmQgY2xpZW50XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBMZWFkZXJib2FyZENsaWVudCB3aXRoIDMyLWJpdCBmbG9hdCBzY29yZXMuXG4gICAqL1xuICBwdWJsaWMgbGVhZGVyYm9hcmQoY2FjaGVOYW1lOiBzdHJpbmcsIGxlYWRlcmJvYXJkTmFtZTogc3RyaW5nKTogSUxlYWRlcmJvYXJkIHtcbiAgICByZXR1cm4gbmV3IExlYWRlcmJvYXJkKHRoaXMuZGF0YUNsaWVudCwgY2FjaGVOYW1lLCBsZWFkZXJib2FyZE5hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24oKTogTGVhZGVyYm9hcmRDb25maWd1cmF0aW9uIHtcbiAgcmV0dXJuIExlYWRlcmJvYXJkQ29uZmlndXJhdGlvbnMuTGFwdG9wLmxhdGVzdCgpO1xufVxuIl19