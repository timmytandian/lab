"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheDataClient = exports.CONNECTION_ID_KEY = void 0;
const generated_types_1 = require("@gomomento/generated-types");
// older versions of node don't have the global util variables https://github.com/nodejs/node/issues/20365
const util_1 = require("util");
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const retry_interceptor_1 = require("./grpc/retry-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const grpc_js_1 = require("@grpc/grpc-js");
const __1 = require("..");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
const middlewares_interceptor_1 = require("./grpc/middlewares-interceptor");
const cacheclient_1 = require("@gomomento/generated-types/dist/cacheclient");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const grpc_response_types_1 = require("@gomomento/sdk-core/dist/src/messages/responses/grpc-response-types");
const connectivity_state_1 = require("@grpc/grpc-js/build/src/connectivity-state");
var grpcCache = generated_types_1.cache.cache_client;
var _Unbounded = cacheclient_1.cache_client._Unbounded;
var ECacheResult = cacheclient_1.cache_client.ECacheResult;
var _ItemGetTypeResponse = cacheclient_1.cache_client._ItemGetTypeResponse;
const grpc_channel_options_1 = require("./grpc/grpc-channel-options");
exports.CONNECTION_ID_KEY = Symbol('connectionID');
class CacheDataClient {
    /**
     * @param {CacheClientProps} props
     * @param dataClientID
     */
    constructor(props, dataClientID) {
        this.configuration = props.configuration;
        this.credentialProvider = props.credentialProvider;
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors());
        const grpcConfig = this.configuration
            .getTransportStrategy()
            .getGrpcConfig();
        this.requestTimeoutMs =
            grpcConfig.getDeadlineMillis() ||
                CacheDataClient.DEFAULT_REQUEST_TIMEOUT_MS;
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating cache client using endpoint: '${this.credentialProvider.getCacheEndpoint()}'`);
        const channelOptions = (0, grpc_channel_options_1.grpcChannelOptionsFromGrpcConfig)(grpcConfig);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => {
                this.logger.debug(`Constructing channel for clientID ${dataClientID}`);
                return new grpcCache.ScsClient(this.credentialProvider.getCacheEndpoint(), grpc_js_1.ChannelCredentials.createSsl(), channelOptions);
            },
            loggerFactory: this.configuration.getLoggerFactory(),
            maxIdleMillis: this.configuration
                .getTransportStrategy()
                .getMaxIdleMillis(),
            maxClientAgeMillis: this.configuration
                .getTransportStrategy()
                .getMaxClientAgeMillis(),
        });
        this.textEncoder = new util_1.TextEncoder();
        this.defaultTtlSeconds = props.defaultTtlSeconds;
        // this context object is currently internal only but can be extended in the Configuration object is we wants clients
        // to be able to set it.
        const context = {};
        context[exports.CONNECTION_ID_KEY] = dataClientID;
        this.interceptors = this.initializeInterceptors(this.configuration.getLoggerFactory(), this.configuration.getMiddlewares(), context);
    }
    connect(timeoutSeconds = 10) {
        this.logger.debug('Attempting to eagerly connect to channel');
        const deadline = new Date();
        deadline.setSeconds(deadline.getSeconds() + timeoutSeconds);
        return this.connectWithinDeadline(deadline);
    }
    connectWithinDeadline(deadline) {
        return new Promise((resolve, reject) => {
            // Get the current state and initiate a connection
            const currentState = this.clientWrapper
                .getClient()
                .getChannel()
                .getConnectivityState(true);
            this.logger.debug(`Client connectivity state: ${currentState}`);
            if (currentState === connectivity_state_1.ConnectivityState.READY) {
                resolve();
                return;
            }
            const now = new Date();
            if (now >= deadline) {
                this.logger.error('Unable to connect to Momento: deadline exceeded.');
                resolve();
                return;
            }
            this.clientWrapper
                .getClient()
                .getChannel()
                .watchConnectivityState(currentState, deadline, (error) => {
                if (error) {
                    this.logger.error(`Unable to connect to Momento: ${error.name}. currentState: ${currentState} :
              Please contact Momento if this persists. `);
                    resolve();
                    return;
                }
                const newState = this.clientWrapper
                    .getClient()
                    .getChannel()
                    .getConnectivityState(false);
                if (newState === connectivity_state_1.ConnectivityState.READY) {
                    this.logger.debug(`Connected! Current state: ${newState}`);
                    resolve();
                }
                else if (newState === connectivity_state_1.ConnectivityState.CONNECTING) {
                    // The connection goes through the CONNECTING state before becoming READY,
                    // so we must watch it twice.
                    this.logger.debug(`Connecting! Current state: ${newState}`);
                    this.connectWithinDeadline(deadline).then(resolve).catch(reject);
                }
                else {
                    this.logger.error(`Unable to connect to Momento: Unexpected connection state: ${newState}., oldState: ${currentState}
              Please contact Momento if this persists.`);
                    resolve();
                }
            });
        });
    }
    getEndpoint() {
        const endpoint = this.credentialProvider.getCacheEndpoint();
        this.logger.debug(`Using cache endpoint: ${endpoint}`);
        return endpoint;
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout !== undefined && timeout <= 0) {
            throw new __1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    convertECacheResult(result) {
        switch (result) {
            case grpcCache.ECacheResult.Hit:
                return grpc_response_types_1._ECacheResult.Hit;
            case grpcCache.ECacheResult.Invalid:
                return grpc_response_types_1._ECacheResult.Invalid;
            case grpcCache.ECacheResult.Miss:
                return grpc_response_types_1._ECacheResult.Miss;
            case grpcCache.ECacheResult.Ok:
                return grpc_response_types_1._ECacheResult.Ok;
        }
    }
    convertItemTypeResult(result) {
        switch (result) {
            case _ItemGetTypeResponse.ItemType.SCALAR:
                return __1.ItemType.SCALAR;
            case _ItemGetTypeResponse.ItemType.LIST:
                return __1.ItemType.LIST;
            case _ItemGetTypeResponse.ItemType.DICTIONARY:
                return __1.ItemType.DICTIONARY;
            case _ItemGetTypeResponse.ItemType.SET:
                return __1.ItemType.SET;
            case _ItemGetTypeResponse.ItemType.SORTED_SET:
                return __1.ItemType.SORTED_SET;
        }
    }
    async set(cacheName, key, value, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSet.Error(err));
        }
        const ttlToUse = ttl || this.defaultTtlSeconds;
        this.logger.trace(`Issuing 'set' request; key: ${key.toString()}, value length: ${value.length}, ttl: ${ttlToUse.toString()}`);
        const encodedKey = this.convert(key);
        const encodedValue = this.convert(value);
        return await this.sendSet(cacheName, encodedKey, encodedValue, ttlToUse);
    }
    async sendSet(cacheName, key, value, ttl) {
        const request = new grpcCache._SetRequest({
            cache_body: value,
            cache_key: key,
            ttl_milliseconds: ttl * 1000,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().Set(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSet.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSet.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setFetch(cacheName, setName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetFetch.Error(err));
        }
        return await this.sendSetFetch(cacheName, this.convert(setName));
    }
    async sendSetFetch(cacheName, setName) {
        const request = new grpcCache._SetFetchRequest({
            set_name: setName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetFetch.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheSetFetch.Hit(resp.found.elements));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setAddElements(cacheName, setName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetAddElements.Error(err));
        }
        return await this.sendSetAddElements(cacheName, this.convert(setName), this.convertArray(elements), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
    }
    async sendSetAddElements(cacheName, setName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SetUnionRequest({
            set_name: setName,
            elements: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetUnion(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetAddElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new __1.CacheSetAddElements.Success());
                }
            });
        });
    }
    async setRemoveElements(cacheName, setName, elements) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetRemoveElements.Error(err));
        }
        return await this.sendSetRemoveElements(cacheName, this.convert(setName), this.convertArray(elements));
    }
    async sendSetRemoveElements(cacheName, setName, elements) {
        const subtrahend = new grpcCache._SetDifferenceRequest._Subtrahend({
            set: new grpcCache._SetDifferenceRequest._Subtrahend._Set({
                elements: elements,
            }),
        });
        const request = new grpcCache._SetDifferenceRequest({
            set_name: setName,
            subtrahend: subtrahend,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetDifference(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetRemoveElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new __1.CacheSetRemoveElements.Success());
                }
            });
        });
    }
    async setIfNotExists(cacheName, key, value, ttl) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetIfNotExists.Error(err));
        }
        this.logger.trace(`Issuing 'setIfNotExists' request; key: ${key.toString()}, field: ${value.toString()}, ttlSeconds: ${(_a = ttl === null || ttl === void 0 ? void 0 : ttl.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendSetIfNotExists(cacheName, this.convert(key), this.convert(value), ttl ? ttl * 1000 : this.defaultTtlSeconds * 1000);
        this.logger.trace(`'setIfNotExists' request result: ${result.toString()}`);
        return result;
    }
    async sendSetIfNotExists(cacheName, key, value, ttlMilliseconds) {
        const request = new grpcCache._SetIfNotExistsRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetIfNotExists(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case 'stored':
                            resolve(new __1.CacheSetIfNotExists.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfNotExists.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError('SetIfNotExists responded with an unknown result')));
                            break;
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetIfNotExists.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async delete(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDelete.Error(err));
        }
        this.logger.trace(`Issuing 'delete' request; key: ${key.toString()}`);
        return await this.sendDelete(cacheName, this.convert(key));
    }
    async sendDelete(cacheName, key) {
        const request = new grpcCache._DeleteRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().Delete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDelete.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDelete.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async get(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheGet.Error(err));
        }
        this.logger.trace(`Issuing 'get' request; key: ${key.toString()}`);
        const result = await this.sendGet(cacheName, this.convert(key));
        this.logger.trace(`'get' request result: ${result.toString()}`);
        return result;
    }
    async sendGet(cacheName, key) {
        const request = new grpcCache._GetRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().Get(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case grpcCache.ECacheResult.Miss:
                            resolve(new __1.CacheGet.Miss());
                            break;
                        case grpcCache.ECacheResult.Hit:
                            resolve(new __1.CacheGet.Hit(resp.cache_body));
                            break;
                        case grpcCache.ECacheResult.Invalid:
                        case grpcCache.ECacheResult.Ok:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError(resp.message)));
                            break;
                        default:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError('An unknown error occurred: ' + resp.message)));
                            break;
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheGet.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listConcatenateBack(cacheName, listName, values, truncateFrontToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListConcatenateBack.Error(err));
        }
        this.logger.trace(`Issuing 'listConcatenateBack' request; listName: ${listName}, values length: ${values.length}, ${ttl.toString()}, truncateFrontToSize: ${(_a = truncateFrontToSize === null || truncateFrontToSize === void 0 ? void 0 : truncateFrontToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListConcatenateBack(cacheName, this.convert(listName), this.convertArray(values), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateFrontToSize);
        this.logger.trace(`'listConcatenateBack' request result: ${result.toString()}`);
        return result;
    }
    async sendListConcatenateBack(cacheName, listName, values, ttlMilliseconds, refreshTtl, truncateFrontToSize) {
        const request = new grpcCache._ListConcatenateBackRequest({
            list_name: listName,
            values: values,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_front_to_size: truncateFrontToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListConcatenateBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListConcatenateBack.Success(resp.list_length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListConcatenateBack.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listConcatenateFront(cacheName, listName, values, truncateBackToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListConcatenateFront.Error(err));
        }
        this.logger.trace(`Issuing 'listConcatenateFront' request; listName: ${listName}, values length: ${values.length}, ${ttl.toString()}, truncateBackToSize: ${(_a = truncateBackToSize === null || truncateBackToSize === void 0 ? void 0 : truncateBackToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListConcatenateFront(cacheName, this.convert(listName), this.convertArray(values), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateBackToSize);
        this.logger.trace(`'listConcatenateFront' request result: ${result.toString()}`);
        return result;
    }
    async sendListConcatenateFront(cacheName, listName, values, ttlMilliseconds, refreshTtl, truncateBackToSize) {
        const request = new grpcCache._ListConcatenateFrontRequest({
            list_name: listName,
            values: values,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_back_to_size: truncateBackToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListConcatenateFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListConcatenateFront.Success(resp.list_length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListConcatenateFront.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listFetch(cacheName, listName, startIndex, endIndex) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
            (0, utils_1.validateListSliceStartEnd)(startIndex, endIndex);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListFetch.Error(err));
        }
        this.logger.trace("Issuing 'listFetch' request; listName: %s, startIndex: %s, endIndex: %s", listName, startIndex !== null && startIndex !== void 0 ? startIndex : 'null', endIndex !== null && endIndex !== void 0 ? endIndex : 'null');
        const result = await this.sendListFetch(cacheName, this.convert(listName), startIndex, endIndex);
        this.logger.trace("'listFetch' request result: %s", result.toString());
        return result;
    }
    async sendListFetch(cacheName, listName, start, end) {
        const request = new grpcCache._ListFetchRequest({
            list_name: listName,
        });
        if (start) {
            request.inclusive_start = start;
        }
        else {
            request.unbounded_start = new _Unbounded();
        }
        if (end) {
            request.exclusive_end = end;
        }
        else {
            request.unbounded_end = new _Unbounded();
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListFetch.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListFetch.Hit(resp.found.values));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listRetain(cacheName, listName, startIndex, endIndex, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
            (0, utils_1.validateListSliceStartEnd)(startIndex, endIndex);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListRetain.Error(err));
        }
        this.logger.trace("Issuing 'listRetain' request; listName: %s, startIndex: %s, endIndex: %s, ttl: %s", listName, startIndex !== null && startIndex !== void 0 ? startIndex : 'null', endIndex !== null && endIndex !== void 0 ? endIndex : 'null', (_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendListRetain(cacheName, this.convert(listName), startIndex, endIndex, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'listRetain' request result: %s", result.toString());
        return result;
    }
    async sendListRetain(cacheName, listName, start, end, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._ListRetainRequest({
            list_name: listName,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        if (start) {
            request.inclusive_start = start;
        }
        else {
            request.unbounded_start = new _Unbounded();
        }
        if (end) {
            request.exclusive_end = end;
        }
        else {
            request.unbounded_end = new _Unbounded();
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListRetain(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListRetain.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListRetain.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listLength(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListLength.Error(err));
        }
        this.logger.trace(`Issuing 'listLength' request; listName: ${listName}`);
        const result = await this.sendListLength(cacheName, this.convert(listName));
        this.logger.trace(`'listLength' request result: ${result.toString()}`);
        return result;
    }
    async sendListLength(cacheName, listName) {
        const request = new grpcCache._ListLengthRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListLength.Hit(resp.found.length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listPopBack(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListPopBack.Error(err));
        }
        this.logger.trace("Issuing 'listPopBack' request");
        const result = await this.sendListPopBack(cacheName, this.convert(listName));
        this.logger.trace(`'listPopBack' request result: ${result.toString()}`);
        return result;
    }
    async sendListPopBack(cacheName, listName) {
        const request = new grpcCache._ListPopBackRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListPopBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListPopBack.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListPopBack.Hit(resp.found.back));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListPopBack.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listPopFront(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListPopFront.Error(err));
        }
        this.logger.trace("Issuing 'listPopFront' request");
        const result = await this.sendListPopFront(cacheName, this.convert(listName));
        this.logger.trace(`'listPopFront' request result: ${result.toString()}`);
        return result;
    }
    async sendListPopFront(cacheName, listName) {
        const request = new grpcCache._ListPopFrontRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListPopFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListPopFront.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListPopFront.Hit(resp.found.front));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListPopFront.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listPushBack(cacheName, listName, value, truncateFrontToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListPushBack.Error(err));
        }
        this.logger.trace(`Issuing 'listPushBack' request; listName: ${listName}, value length: ${value.length}, ${ttl.toString()}, truncateFrontToSize: ${(_a = truncateFrontToSize === null || truncateFrontToSize === void 0 ? void 0 : truncateFrontToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListPushBack(cacheName, this.convert(listName), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateFrontToSize);
        this.logger.trace(`'listPushBack' request result: ${result.toString()}`);
        return result;
    }
    async sendListPushBack(cacheName, listName, value, ttlMilliseconds, refreshTtl, truncateFrontToSize) {
        const request = new grpcCache._ListPushBackRequest({
            list_name: listName,
            value: value,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_front_to_size: truncateFrontToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListPushBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListPushBack.Success(resp.list_length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListPushBack.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listPushFront(cacheName, listName, value, truncateBackToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListPushFront.Error(err));
        }
        this.logger.trace(`Issuing 'listPushFront' request; listName: ${listName}, value length: ${value.length}, ${ttl.toString()}, truncateBackToSize: ${(_a = truncateBackToSize === null || truncateBackToSize === void 0 ? void 0 : truncateBackToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListPushFront(cacheName, this.convert(listName), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateBackToSize);
        this.logger.trace(`'listPushFront' request result: ${result.toString()}`);
        return result;
    }
    async sendListPushFront(cacheName, listName, value, ttlMilliseconds, refreshTtl, truncateBackToSize) {
        const request = new grpcCache._ListPushFrontRequest({
            list_name: listName,
            value: value,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_back_to_size: truncateBackToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListPushFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListPushFront.Success(resp.list_length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListPushFront.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listRemoveValue(cacheName, listName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListRemoveValue.Error(err));
        }
        this.logger.trace(`Issuing 'listRemoveValue' request; listName: ${listName}, value length: ${value.length}`);
        const result = await this.sendListRemoveValue(cacheName, this.convert(listName), this.convert(value));
        this.logger.trace(`'listRemoveValue' request result: ${result.toString()}`);
        return result;
    }
    async sendListRemoveValue(cacheName, listName, value) {
        const request = new grpcCache._ListRemoveRequest({
            list_name: listName,
            all_elements_with_value: value,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListRemove(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListRemoveValue.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListRemoveValue.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryFetch(cacheName, dictionaryName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryFetch.Error(err));
        }
        this.logger.trace(`Issuing 'dictionaryFetch' request; dictionaryName: ${dictionaryName}`);
        const result = await this.sendDictionaryFetch(cacheName, this.convert(dictionaryName));
        this.logger.trace(`'dictionaryFetch' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryFetch(cacheName, dictionaryName) {
        const request = new grpcCache._DictionaryFetchRequest({
            dictionary_name: dictionaryName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheDictionaryFetch.Hit(resp.found.items));
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDictionaryFetch.Miss());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionarySetField(cacheName, dictionaryName, field, value, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionarySetField.Error(err));
        }
        this.logger.trace(`Issuing 'dictionarySetField' request; field: ${field.toString()}, value length: ${value.length}, ttl: ${(_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendDictionarySetField(cacheName, this.convert(dictionaryName), this.convert(field), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace(`'dictionarySetField' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionarySetField(cacheName, dictionaryName, field, value, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionarySetRequest({
            dictionary_name: dictionaryName,
            items: this.toSingletonFieldValuePair(field, value),
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionarySet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionarySetField.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionarySetField.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionarySetFields(cacheName, dictionaryName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionarySetFields.Error(err));
        }
        this.logger.trace(`Issuing 'dictionarySetFields' request; elements: ${elements.toString()}, ttl: ${(_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const dictionaryFieldValuePairs = this.convertElements(elements);
        const result = await this.sendDictionarySetFields(cacheName, this.convert(dictionaryName), dictionaryFieldValuePairs, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace(`'dictionarySetFields' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionarySetFields(cacheName, dictionaryName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionarySetRequest({
            dictionary_name: dictionaryName,
            items: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionarySet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionarySetFields.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionarySetFields.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryGetField(cacheName, dictionaryName, field) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryGetField.Error(err, this.convert(field)));
        }
        this.logger.trace(`Issuing 'dictionaryGetField' request; field: ${field.toString()}`);
        const result = await this.sendDictionaryGetField(cacheName, this.convert(dictionaryName), this.convert(field));
        this.logger.trace(`'dictionaryGetField' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryGetField(cacheName, dictionaryName, field) {
        const request = new grpcCache._DictionaryGetRequest({
            dictionary_name: dictionaryName,
            fields: [field],
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryGet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'missing') {
                    resolve(new __1.CacheDictionaryGetField.Miss(field));
                }
                else if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'found') {
                    if ((resp === null || resp === void 0 ? void 0 : resp.found.items.length) === 0) {
                        resolve(new __1.CacheDictionaryGetField.Error(new __1.UnknownError('_DictionaryGetResponseResponse contained no data but was found'), field));
                    }
                    else if ((resp === null || resp === void 0 ? void 0 : resp.found.items[0].result) === grpcCache.ECacheResult.Miss) {
                        resolve(new __1.CacheDictionaryGetField.Miss(field));
                    }
                    else {
                        resolve(new __1.CacheDictionaryGetField.Hit(resp === null || resp === void 0 ? void 0 : resp.found.items[0].cache_body, field));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryGetField.Error(e, field),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryGetFields(cacheName, dictionaryName, fields) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryGetFields.Error(err));
        }
        this.logger.trace(`Issuing 'dictionaryGetFields' request; fields: ${fields.toString()}`);
        const result = await this.sendDictionaryGetFields(cacheName, this.convert(dictionaryName), this.convertArray(fields));
        this.logger.trace(`'dictionaryGetFields' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryGetFields(cacheName, dictionaryName, fields) {
        const request = new grpcCache._DictionaryGetRequest({
            dictionary_name: dictionaryName,
            fields: fields,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryGet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'found') {
                    const items = resp.found.items.map(item => {
                        const result = this.convertECacheResult(item.result);
                        return new grpc_response_types_1._DictionaryGetResponsePart(result, item.cache_body);
                    });
                    resolve(new __1.CacheDictionaryGetFields.Hit(items, fields));
                }
                else if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'missing') {
                    resolve(new __1.CacheDictionaryGetFields.Miss());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryGetFields.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryRemoveField(cacheName, dictionaryName, field) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryRemoveField.Error(err));
        }
        this.logger.trace(`Issuing 'dictionaryRemoveField' request; field: ${field.toString()}`);
        const result = await this.sendDictionaryRemoveField(cacheName, this.convert(dictionaryName), this.convert(field));
        this.logger.trace(`'dictionaryRemoveField' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryRemoveField(cacheName, dictionaryName, field) {
        const request = new grpcCache._DictionaryDeleteRequest({
            dictionary_name: dictionaryName,
            some: new grpcCache._DictionaryDeleteRequest.Some(),
        });
        request.some.fields.push(field);
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryDelete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionaryRemoveField.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryRemoveField.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryRemoveFields(cacheName, dictionaryName, fields) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryRemoveFields.Error(err));
        }
        this.logger.trace(`Issuing 'dictionaryRemoveFields' request; fields: ${fields.toString()}`);
        const result = await this.sendDictionaryRemoveFields(cacheName, this.convert(dictionaryName), this.convertArray(fields));
        this.logger.trace(`'dictionaryRemoveFields' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryRemoveFields(cacheName, dictionaryName, fields) {
        const request = new grpcCache._DictionaryDeleteRequest({
            dictionary_name: dictionaryName,
            some: new grpcCache._DictionaryDeleteRequest.Some(),
        });
        fields.forEach(field => request.some.fields.push(field));
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryDelete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionaryRemoveFields.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryRemoveFields.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryLength(cacheName, dictionaryName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryLength.Error(err));
        }
        this.logger.trace(`Issuing 'dictionaryLength' request; dictionaryName: ${dictionaryName}`);
        const result = await this.sendDictionaryLength(cacheName, this.convert(dictionaryName));
        this.logger.trace(`'dictionaryLength' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryLength(cacheName, dictionaryName) {
        const request = new grpcCache._DictionaryLengthRequest({
            dictionary_name: dictionaryName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDictionaryLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheDictionaryLength.Hit(resp.found.length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async increment(cacheName, field, amount = 1, ttl) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheIncrement.Error(err));
        }
        this.logger.trace(`Issuing 'increment' request; field: ${field.toString()}, amount : ${amount}, ttl: ${(_a = ttl === null || ttl === void 0 ? void 0 : ttl.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendIncrement(cacheName, this.convert(field), amount, ttl || this.defaultTtlSeconds * 1000);
        this.logger.trace(`'increment' request result: ${result.toString()}`);
        return result;
    }
    async sendIncrement(cacheName, field, amount = 1, ttlMilliseconds) {
        const request = new grpcCache._IncrementRequest({
            cache_key: field,
            amount,
            ttl_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().Increment(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    if (resp.value) {
                        resolve(new __1.CacheIncrement.Success(resp.value));
                    }
                    else {
                        resolve(new __1.CacheIncrement.Success(0));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheIncrement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryIncrement(cacheName, dictionaryName, field, amount = 1, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryIncrement.Error(err));
        }
        this.logger.trace(`Issuing 'dictionaryIncrement' request; field: ${field.toString()}, amount : ${amount}, ttl: ${(_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendDictionaryIncrement(cacheName, this.convert(dictionaryName), this.convert(field), amount, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace(`'dictionaryIncrement' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryIncrement(cacheName, dictionaryName, field, amount, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionaryIncrementRequest({
            dictionary_name: dictionaryName,
            field,
            amount,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryIncrement(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    if (resp.value) {
                        resolve(new __1.CacheDictionaryIncrement.Success(resp.value));
                    }
                    else {
                        resolve(new __1.CacheDictionaryIncrement.Success(0));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryIncrement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetPutElement(cacheName, sortedSetName, value, score, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetPutElement.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetPutElement' request; value: %s, score : %s, ttl: %s", (0, utils_1.truncateString)(value.toString()), score, (_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendSortedSetPutElement(cacheName, this.convert(sortedSetName), this.convert(value), score, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'sortedSetPutElement' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetPutElement(cacheName, sortedSetName, value, score, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetPutRequest({
            set_name: sortedSetName,
            elements: [new grpcCache._SortedSetElement({ value, score })],
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetPut(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSortedSetPutElement.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetPutElement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetPutElements(cacheName, sortedSetName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetPutElements.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetPutElements' request; elements : %s, ttl: %s", elements.toString(), (_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const sortedSetValueScorePairs = this.convertSortedSetMapOrRecord(elements);
        const result = await this.sendSortedSetPutElements(cacheName, this.convert(sortedSetName), sortedSetValueScorePairs, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'sortedSetPutElements' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetPutElements(cacheName, sortedSetName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetPutRequest({
            set_name: sortedSetName,
            elements: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetPut(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSortedSetPutElements.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetPutElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetFetchByRank(cacheName, sortedSetName, order, startRank, endRank) {
        var _a, _b;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetRanks)(startRank, endRank);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetFetch.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetFetchByRank' request; startRank: %s, endRank : %s, order: %s", (_a = startRank.toString()) !== null && _a !== void 0 ? _a : 'null', (_b = endRank === null || endRank === void 0 ? void 0 : endRank.toString()) !== null && _b !== void 0 ? _b : 'null', order.toString());
        const result = await this.sendSortedSetFetchByRank(cacheName, this.convert(sortedSetName), order, startRank, endRank);
        this.logger.trace("'sortedSetFetchByRank' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetFetchByRank(cacheName, sortedSetName, order, startRank, endRank) {
        const by_index = new grpcCache._SortedSetFetchRequest._ByIndex();
        if (startRank) {
            by_index.inclusive_start_index = startRank;
        }
        else {
            by_index.unbounded_start = new grpcCache._Unbounded();
        }
        if (endRank) {
            by_index.exclusive_end_index = endRank;
        }
        else {
            by_index.unbounded_end = new grpcCache._Unbounded();
        }
        const protoBufOrder = order === __1.SortedSetOrder.Descending
            ? grpcCache._SortedSetFetchRequest.Order.DESCENDING
            : grpcCache._SortedSetFetchRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetFetchRequest({
            set_name: sortedSetName,
            order: protoBufOrder,
            with_scores: true,
            by_index: by_index,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                var _a;
                if (resp) {
                    if (resp === null || resp === void 0 ? void 0 : resp.found) {
                        if ((_a = resp === null || resp === void 0 ? void 0 : resp.found) === null || _a === void 0 ? void 0 : _a.values_with_scores) {
                            resolve(new __1.CacheSortedSetFetch.Hit(resp.found.values_with_scores.elements));
                        }
                        else {
                            resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch hit response type')));
                        }
                    }
                    else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                        resolve(new __1.CacheSortedSetFetch.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch response type')));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetFetchByScore(cacheName, sortedSetName, order, minScore, maxScore, offset, count) {
        var _a, _b, _c, _d;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
            if (offset !== undefined) {
                (0, utils_1.validateSortedSetOffset)(offset);
            }
            if (count !== undefined) {
                (0, utils_1.validateSortedSetCount)(count);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetFetch.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetFetchByScore' request; minScore: %s, maxScore : %s, order: %s, offset: %s, count: %s", (_a = minScore === null || minScore === void 0 ? void 0 : minScore.toString()) !== null && _a !== void 0 ? _a : 'null', (_b = maxScore === null || maxScore === void 0 ? void 0 : maxScore.toString()) !== null && _b !== void 0 ? _b : 'null', order.toString(), (_c = offset === null || offset === void 0 ? void 0 : offset.toString()) !== null && _c !== void 0 ? _c : 'null', (_d = count === null || count === void 0 ? void 0 : count.toString()) !== null && _d !== void 0 ? _d : 'null');
        const result = await this.sendSortedSetFetchByScore(cacheName, this.convert(sortedSetName), order, minScore, maxScore, offset, count);
        this.logger.trace("'sortedSetFetchByScore' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetFetchByScore(cacheName, sortedSetName, order, minScore, maxScore, offset, count) {
        const by_score = new grpcCache._SortedSetFetchRequest._ByScore();
        if (minScore !== undefined) {
            by_score.min_score = new grpcCache._SortedSetFetchRequest._ByScore._Score({
                score: minScore,
                exclusive: false,
            });
        }
        else {
            by_score.unbounded_min = new grpcCache._Unbounded();
        }
        if (maxScore !== undefined) {
            by_score.max_score = new grpcCache._SortedSetFetchRequest._ByScore._Score({
                score: maxScore,
                exclusive: false,
            });
        }
        else {
            by_score.unbounded_max = new grpcCache._Unbounded();
        }
        by_score.offset = offset !== null && offset !== void 0 ? offset : 0;
        // Note: the service reserves negative counts to mean all elements in the
        // result set.
        by_score.count = count !== null && count !== void 0 ? count : -1;
        const protoBufOrder = order === __1.SortedSetOrder.Descending
            ? grpcCache._SortedSetFetchRequest.Order.DESCENDING
            : grpcCache._SortedSetFetchRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetFetchRequest({
            set_name: sortedSetName,
            order: protoBufOrder,
            with_scores: true,
            by_score: by_score,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                var _a;
                if (resp) {
                    if (resp === null || resp === void 0 ? void 0 : resp.found) {
                        if ((_a = resp === null || resp === void 0 ? void 0 : resp.found) === null || _a === void 0 ? void 0 : _a.values_with_scores) {
                            resolve(new __1.CacheSortedSetFetch.Hit(resp.found.values_with_scores.elements));
                        }
                        else {
                            resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch hit response type')));
                        }
                    }
                    else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                        resolve(new __1.CacheSortedSetFetch.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch response type')));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetGetRank(cacheName, sortedSetName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetGetRank.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetGetRank' request; value: %s", (0, utils_1.truncateString)(value.toString()));
        const result = await this.sendSortedSetGetRank(cacheName, this.convert(sortedSetName), this.convert(value));
        this.logger.trace("'sortedSetGetRank' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetGetRank(cacheName, sortedSetName, value) {
        const request = new grpcCache._SortedSetGetRankRequest({
            set_name: sortedSetName,
            value: value,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                .SortedSetGetRank(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                var _a, _b;
                if ((resp === null || resp === void 0 ? void 0 : resp.missing) ||
                    ((_a = resp === null || resp === void 0 ? void 0 : resp.element_rank) === null || _a === void 0 ? void 0 : _a.result) === ECacheResult.Miss) {
                    resolve(new __1.CacheSortedSetGetRank.Miss());
                }
                else if (((_b = resp === null || resp === void 0 ? void 0 : resp.element_rank) === null || _b === void 0 ? void 0 : _b.result) === ECacheResult.Hit) {
                    if ((resp === null || resp === void 0 ? void 0 : resp.element_rank.rank) === undefined) {
                        resolve(new __1.CacheSortedSetGetRank.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetGetRank.Hit(resp.element_rank.rank));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetGetRank.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetGetScore(cacheName, sortedSetName, value) {
        const responses = await this.sortedSetGetScores(cacheName, sortedSetName, [
            value,
        ]);
        if (responses instanceof __1.CacheSortedSetGetScores.Hit) {
            return responses.responses()[0];
        }
        else if (responses instanceof __1.CacheSortedSetGetScores.Miss) {
            return new __1.CacheSortedSetGetScore.Miss(this.convert(value));
        }
        else if (responses instanceof __1.CacheSortedSetGetScores.Error) {
            return this.cacheServiceErrorMapper.returnOrThrowError(responses.innerException(), err => new __1.CacheSortedSetGetScore.Error(err, this.convert(value)));
        }
        return this.cacheServiceErrorMapper.returnOrThrowError(new __1.UnknownError('Unknown response type'), err => new __1.CacheSortedSetGetScore.Error(err, this.convert(value)));
    }
    async sortedSetGetScores(cacheName, sortedSetName, values) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetGetScores.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetGetScores' request; values: %s", (0, utils_1.truncateString)(values.toString()));
        const result = await this.sendSortedSetGetScores(cacheName, this.convert(sortedSetName), values.map(value => this.convert(value)));
        this.logger.trace("'sortedSetGetScores' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetGetScores(cacheName, sortedSetName, values) {
        const request = new grpcCache._SortedSetGetScoreRequest({
            set_name: sortedSetName,
            values: values,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                .SortedSetGetScore(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetGetScores.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    const elements = resp.found.elements.map(ele => {
                        const result = this.convertECacheResult(ele.result);
                        return new grpc_response_types_1._SortedSetGetScoreResponsePart(result, ele.score);
                    });
                    resolve(new __1.CacheSortedSetGetScores.Hit(elements, values));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetGetScores.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetIncrementScore(cacheName, sortedSetName, value, amount = 1, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetIncrementScore.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetIncrementScore' request; value: %s", (0, utils_1.truncateString)(value.toString()));
        const result = await this.sendSortedSetIncrementScore(cacheName, this.convert(sortedSetName), this.convert(value), amount, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'sortedSetIncrementScore' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetIncrementScore(cacheName, sortedSetName, value, amount, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetIncrementRequest({
            set_name: sortedSetName,
            value: value,
            amount: amount,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                .SortedSetIncrement(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    if (resp.score) {
                        resolve(new __1.CacheSortedSetIncrementScore.Success(resp.score));
                    }
                    else {
                        resolve(new __1.CacheSortedSetIncrementScore.Success(0));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetIncrementScore.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetRemoveElement(cacheName, sortedSetName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetFetch.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetRemoveElement' request");
        const result = await this.sendSortedSetRemoveElement(cacheName, this.convert(sortedSetName), this.convert(value));
        this.logger.trace("'sortedSetRemoveElement' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetRemoveElement(cacheName, sortedSetName, value) {
        const request = new grpcCache._SortedSetRemoveRequest({
            set_name: sortedSetName,
            some: new grpcCache._SortedSetRemoveRequest._Some({
                values: [value],
            }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetRemove(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetRemoveElement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new __1.CacheSortedSetRemoveElement.Success());
                }
            });
        });
    }
    async sortedSetRemoveElements(cacheName, sortedSetName, values) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetFetch.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetRemoveElements' request");
        const result = await this.sendSortedSetRemoveElements(cacheName, this.convert(sortedSetName), this.convertArray(values));
        this.logger.trace("'sortedSetRemoveElements' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetRemoveElements(cacheName, sortedSetName, values) {
        const request = new grpcCache._SortedSetRemoveRequest({
            set_name: sortedSetName,
            some: new grpcCache._SortedSetRemoveRequest._Some({
                values: values,
            }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetRemove(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetRemoveElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new __1.CacheSortedSetRemoveElements.Success());
                }
            });
        });
    }
    async sortedSetLength(cacheName, sortedSetName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetFetch.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetLength' request");
        const result = await this.sendSortedSetLength(cacheName, this.convert(sortedSetName));
        this.logger.trace("'sortedSetLength' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetLength(cacheName, sortedSetName) {
        const request = new grpcCache._SortedSetLengthRequest({
            set_name: sortedSetName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    if (!resp.found.length) {
                        resolve(new __1.CacheSortedSetLength.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetLength.Hit(resp.found.length));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetLengthByScore(cacheName, sortedSetName, minScore, maxScore) {
        var _a, _b;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetFetch.Error(err));
        }
        this.logger.trace("Issuing 'sortedSetLengthByScore' request; minScore: %s, maxScore: %s", (_a = minScore === null || minScore === void 0 ? void 0 : minScore.toString()) !== null && _a !== void 0 ? _a : 'null', (_b = maxScore === null || maxScore === void 0 ? void 0 : maxScore.toString()) !== null && _b !== void 0 ? _b : 'null');
        const result = await this.sendSortedSetLengthByScore(cacheName, this.convert(sortedSetName), minScore, maxScore);
        this.logger.trace("'sortedSetLengthByScore' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetLengthByScore(cacheName, sortedSetName, minScore, maxScore) {
        const request = new grpcCache._SortedSetLengthByScoreRequest({
            set_name: sortedSetName,
        });
        if (minScore === undefined) {
            request.unbounded_min = new grpcCache._Unbounded();
        }
        else {
            request.inclusive_min = minScore;
        }
        if (maxScore === undefined) {
            request.unbounded_max = new grpcCache._Unbounded();
        }
        else {
            request.inclusive_max = maxScore;
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetLengthByScore(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetLengthByScore.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    if (!resp.found.length) {
                        resolve(new __1.CacheSortedSetLengthByScore.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetLengthByScore.Hit(resp.found.length));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetLengthByScore.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    initializeInterceptors(loggerFactory, middlewares, middlewareRequestContext) {
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`),
        ];
        return [
            (0, middlewares_interceptor_1.middlewaresInterceptor)(loggerFactory, middlewares, middlewareRequestContext, this.clientWrapper.getClient()),
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(this.requestTimeoutMs),
            ...(0, retry_interceptor_1.createRetryInterceptorIfEnabled)(this.configuration.getLoggerFactory(), this.configuration.getRetryStrategy()),
        ];
    }
    convert(v) {
        if (typeof v === 'string') {
            return this.textEncoder.encode(v);
        }
        return v;
    }
    convertArray(v) {
        return v.map(i => this.convert(i));
    }
    convertElements(elements) {
        if (elements instanceof Array) {
            return this.convertElements(new Map(elements));
        }
        else if (elements instanceof Map) {
            return [...elements.entries()].map(element => new grpcCache._DictionaryFieldValuePair({
                field: this.convert(element[0]),
                value: this.convert(element[1]),
            }));
        }
        else {
            return Object.entries(elements).map(element => new grpcCache._DictionaryFieldValuePair({
                field: this.convert(element[0]),
                value: this.convert(element[1]),
            }));
        }
    }
    convertSortedSetMapOrRecord(elements) {
        if (elements instanceof Array) {
            return this.convertSortedSetMapOrRecord(new Map(elements));
        }
        else if (elements instanceof Map) {
            return [...elements.entries()].map(element => new grpcCache._SortedSetElement({
                value: this.convert(element[0]),
                score: element[1],
            }));
        }
        else {
            return Object.entries(elements).map(element => new grpcCache._SortedSetElement({
                value: this.convert(element[0]),
                score: element[1],
            }));
        }
    }
    async itemGetType(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheItemGetType.Error(err));
        }
        return await this.sendItemGetType(cacheName, this.convert(key));
    }
    async sendItemGetType(cacheName, key) {
        const request = new grpcCache._ItemGetTypeRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ItemGetType(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheItemGetType.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheItemGetType.Hit(this.convertItemTypeResult(resp.found.item_type)));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheItemGetType.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async itemGetTtl(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheItemGetTtl.Error(err));
        }
        return await this.sendItemGetTtl(cacheName, this.convert(key));
    }
    async sendItemGetTtl(cacheName, key) {
        const request = new grpcCache._ItemGetTtlRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ItemGetTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheItemGetTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheItemGetTtl.Hit(resp.found.remaining_ttl_millis));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheItemGetTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async keyExists(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheKeyExists.Error(err));
        }
        this.logger.trace("Issuing 'keyExists' request");
        const result = await this.sendKeyExists(cacheName, this.convert(key));
        this.logger.trace("'keyExists' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendKeyExists(cacheName, key) {
        const request = new grpcCache._KeysExistRequest({
            cache_keys: [key],
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().KeysExist(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheKeyExists.Success(resp.exists));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheKeyExists.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async updateTtl(cacheName, key, ttlMilliseconds) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheUpdateTtl.Error(err));
        }
        this.logger.trace("Issuing 'updateTtl' request; ttlMilliseconds: %s", (_a = ttlMilliseconds === null || ttlMilliseconds === void 0 ? void 0 : ttlMilliseconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendUpdateTtl(cacheName, this.convert(key), ttlMilliseconds);
        this.logger.trace("'updateTtl' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendUpdateTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            overwrite_to_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheUpdateTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheUpdateTtl.Set());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheUpdateTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async keysExist(cacheName, keys) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheKeysExist.Error(err));
        }
        this.logger.trace("Issuing 'keysExist' request");
        const result = await this.sendKeysExist(cacheName, this.convertArray(keys));
        this.logger.trace("'keysExist' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendKeysExist(cacheName, keys) {
        const request = new grpcCache._KeysExistRequest({
            cache_keys: keys,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().KeysExist(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheKeysExist.Success(resp.exists));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheKeysExist.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async increaseTtl(cacheName, key, ttlMilliseconds) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheIncreaseTtl.Error(err));
        }
        this.logger.trace("Issuing 'increaseTtl' request; ttlMilliseconds: %s", (_a = ttlMilliseconds === null || ttlMilliseconds === void 0 ? void 0 : ttlMilliseconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendIncreaseTtl(cacheName, this.convert(key), ttlMilliseconds);
        this.logger.trace("'increaseTtl' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendIncreaseTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            increase_to_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheIncreaseTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheIncreaseTtl.Set());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheIncreaseTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async decreaseTtl(cacheName, key, ttlMilliseconds) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDecreaseTtl.Error(err));
        }
        this.logger.trace("Issuing 'decreaseTtl' request; ttlMilliseconds: %s", (_a = ttlMilliseconds === null || ttlMilliseconds === void 0 ? void 0 : ttlMilliseconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendDecreaseTtl(cacheName, this.convert(key), ttlMilliseconds);
        this.logger.trace("'decreaseTtl' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendDecreaseTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            decrease_to_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDecreaseTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheDecreaseTtl.Set());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDecreaseTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    createMetadata(cacheName) {
        const metadata = new grpc_js_1.Metadata();
        metadata.set('cache', cacheName);
        return metadata;
    }
    toSingletonFieldValuePair(field, value) {
        return [
            new grpcCache._DictionaryFieldValuePair({
                field: field,
                value: value,
            }),
        ];
    }
}
exports.CacheDataClient = CacheDataClient;
CacheDataClient.DEFAULT_REQUEST_TIMEOUT_MS = 5 * 1000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtZGF0YS1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZXJuYWwvY2FjaGUtZGF0YS1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0VBQWlEO0FBQ2pELDBHQUEwRztBQUMxRywrQkFBaUM7QUFDakMsb0VBQTZFO0FBQzdFLGtGQUEyRTtBQUMzRSxnRUFBeUU7QUFDekUscUZBQTZFO0FBQzdFLDJDQUF3RTtBQUN4RSwwQkFzRFk7QUFDWixxREFBMkM7QUFDM0MsOEVBQXNFO0FBTXRFLDRFQUFzRTtBQUN0RSw2RUFBeUU7QUFFekUsdUVBY3FEO0FBQ3JELDZHQUk2RTtBQUU3RSxtRkFBNkU7QUFFN0UsSUFBTyxTQUFTLEdBQUcsdUJBQUssQ0FBQyxZQUFZLENBQUM7QUFDdEMsSUFBTyxVQUFVLEdBQUcsMEJBQVksQ0FBQyxVQUFVLENBQUM7QUFDNUMsSUFBTyxZQUFZLEdBQUcsMEJBQVksQ0FBQyxZQUFZLENBQUM7QUFDaEQsSUFBTyxvQkFBb0IsR0FBRywwQkFBWSxDQUFDLG9CQUFvQixDQUFDO0FBQ2hFLHNFQUE2RTtBQUVoRSxRQUFBLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUV4RCxNQUFhLGVBQWU7SUFZMUI7OztPQUdHO0lBQ0gsWUFBWSxLQUFpQyxFQUFFLFlBQW9CO1FBQ2pFLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN6QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDO1FBQ25ELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxvREFBdUIsQ0FDeEQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxD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Q0wsSUFBSSxTQUFTLENBQUMseUJBQXlCLENBQUM7Z0JBQ3RDLEtBQUssRUFBRSxLQUFLO2dCQUNaLEtBQUssRUFBRSxLQUFLO2FBQ2IsQ0FBQztTQUNILENBQUM7SUFDSixDQUFDOztBQWo3R0gsMENBazdHQztBQTM2R3lCLDBDQUEwQixHQUFXLENBQUMsR0FBRyxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NhY2hlfSBmcm9tICdAZ29tb21lbnRvL2dlbmVyYXRlZC10eXBlcyc7XG4vLyBvbGRlciB2ZXJzaW9ucyBvZiBub2RlIGRvbid0IGhhdmUgdGhlIGdsb2JhbCB1dGlsIHZhcmlhYmxlcyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzIwMzY1XG5pbXBvcnQge1RleHRFbmNvZGVyfSBmcm9tICd1dGlsJztcbmltcG9ydCB7SGVhZGVyLCBIZWFkZXJJbnRlcmNlcHRvclByb3ZpZGVyfSBmcm9tICcuL2dycGMvaGVhZGVycy1pbnRlcmNlcHRvcic7XG5pbXBvcnQge0NsaWVudFRpbWVvdXRJbnRlcmNlcHRvcn0gZnJvbSAnLi9ncnBjL2NsaWVudC10aW1lb3V0LWludGVyY2VwdG9yJztcbmltcG9ydCB7Y3JlYXRlUmV0cnlJbnRlcmNlcHRvcklmRW5hYmxlZH0gZnJvbSAnLi9ncnBjL3JldHJ5LWludGVyY2VwdG9yJztcbmltcG9ydCB7Q2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXJ9IGZyb20gJy4uL2Vycm9ycy9jYWNoZS1zZXJ2aWNlLWVycm9yLW1hcHBlcic7XG5pbXBvcnQge0NoYW5uZWxDcmVkZW50aWFscywgSW50ZXJjZXB0b3IsIE1ldGFkYXRhfSBmcm9tICdAZ3JwYy9ncnBjLWpzJztcbmltcG9ydCB7XG4gIENhY2hlRGVjcmVhc2VUdGwsXG4gIENhY2hlRGVsZXRlLFxuICBDYWNoZURpY3Rpb25hcnlGZXRjaCxcbiAgQ2FjaGVEaWN0aW9uYXJ5R2V0RmllbGQsXG4gIENhY2hlRGljdGlvbmFyeUdldEZpZWxkcyxcbiAgQ2FjaGVEaWN0aW9uYXJ5SW5jcmVtZW50LFxuICBDYWNoZURpY3Rpb25hcnlMZW5ndGgsXG4gIENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkLFxuICBDYWNoZURpY3Rpb25hcnlSZW1vdmVGaWVsZHMsXG4gIENhY2hlRGljdGlvbmFyeVNldEZpZWxkLFxuICBDYWNoZURpY3Rpb25hcnlTZXRGaWVsZHMsXG4gIENhY2hlR2V0LFxuICBDYWNoZUluY3JlYXNlVHRsLFxuICBDYWNoZUluY3JlbWVudCxcbiAgQ2FjaGVJdGVtR2V0VHRsLFxuICBDYWNoZUl0ZW1HZXRUeXBlLFxuICBDYWNoZUtleUV4aXN0cyxcbiAgQ2FjaGVLZXlzRXhpc3QsXG4gIENhY2hlTGlzdENvbmNhdGVuYXRlQmFjayxcbiAgQ2FjaGVMaXN0Q29uY2F0ZW5hdGVGcm9udCxcbiAgQ2FjaGVMaXN0RmV0Y2gsXG4gIENhY2hlTGlzdExlbmd0aCxcbiAgQ2FjaGVMaXN0UG9wQmFjayxcbiAgQ2FjaGVMaXN0UG9wRnJvbnQsXG4gIENhY2hlTGlzdFB1c2hCYWNrLFxuICBDYWNoZUxpc3RQdXNoRnJvbnQsXG4gIENhY2hlTGlzdFJlbW92ZVZhbHVlLFxuICBDYWNoZUxpc3RSZXRhaW4sXG4gIENhY2hlU2V0LFxuICBDYWNoZVNldEFkZEVsZW1lbnRzLFxuICBDYWNoZVNldEZldGNoLFxuICBDYWNoZVNldElmTm90RXhpc3RzLFxuICBDYWNoZVNldFJlbW92ZUVsZW1lbnRzLFxuICBDYWNoZVNvcnRlZFNldEZldGNoLFxuICBDYWNoZVNvcnRlZFNldEdldFJhbmssXG4gIENhY2hlU29ydGVkU2V0R2V0U2NvcmUsXG4gIENhY2hlU29ydGVkU2V0R2V0U2NvcmVzLFxuICBDYWNoZVNvcnRlZFNldEluY3JlbWVudFNjb3JlLFxuICBDYWNoZVNvcnRlZFNldExlbmd0aCxcbiAgQ2FjaGVTb3J0ZWRTZXRMZW5ndGhCeVNjb3JlLFxuICBDYWNoZVNvcnRlZFNldFB1dEVsZW1lbnQsXG4gIENhY2hlU29ydGVkU2V0UHV0RWxlbWVudHMsXG4gIENhY2hlU29ydGVkU2V0UmVtb3ZlRWxlbWVudCxcbiAgQ2FjaGVTb3J0ZWRTZXRSZW1vdmVFbGVtZW50cyxcbiAgQ2FjaGVVcGRhdGVUdGwsXG4gIENvbGxlY3Rpb25UdGwsXG4gIENyZWRlbnRpYWxQcm92aWRlcixcbiAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gIEl0ZW1UeXBlLFxuICBNb21lbnRvTG9nZ2VyLFxuICBNb21lbnRvTG9nZ2VyRmFjdG9yeSxcbiAgU29ydGVkU2V0T3JkZXIsXG4gIFVua25vd25FcnJvcixcbn0gZnJvbSAnLi4nO1xuaW1wb3J0IHt2ZXJzaW9ufSBmcm9tICcuLi8uLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHtJZGxlR3JwY0NsaWVudFdyYXBwZXJ9IGZyb20gJy4vZ3JwYy9pZGxlLWdycGMtY2xpZW50LXdyYXBwZXInO1xuaW1wb3J0IHtHcnBjQ2xpZW50V3JhcHBlcn0gZnJvbSAnLi9ncnBjL2dycGMtY2xpZW50LXdyYXBwZXInO1xuaW1wb3J0IHtcbiAgTWlkZGxld2FyZSxcbiAgTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyQ29udGV4dCxcbn0gZnJvbSAnLi4vY29uZmlnL21pZGRsZXdhcmUvbWlkZGxld2FyZSc7XG5pbXBvcnQge21pZGRsZXdhcmVzSW50ZXJjZXB0b3J9IGZyb20gJy4vZ3JwYy9taWRkbGV3YXJlcy1pbnRlcmNlcHRvcic7XG5pbXBvcnQge2NhY2hlX2NsaWVudH0gZnJvbSAnQGdvbW9tZW50by9nZW5lcmF0ZWQtdHlwZXMvZGlzdC9jYWNoZWNsaWVudCc7XG5pbXBvcnQge0NvbmZpZ3VyYXRpb259IGZyb20gJy4uL2NvbmZpZy9jb25maWd1cmF0aW9uJztcbmltcG9ydCB7XG4gIHRydW5jYXRlU3RyaW5nLFxuICB2YWxpZGF0ZUNhY2hlTmFtZSxcbiAgdmFsaWRhdGVEaWN0aW9uYXJ5TmFtZSxcbiAgdmFsaWRhdGVMaXN0TmFtZSxcbiAgdmFsaWRhdGVMaXN0U2xpY2VTdGFydEVuZCxcbiAgdmFsaWRhdGVTZXROYW1lLFxuICB2YWxpZGF0ZVNvcnRlZFNldENvdW50LFxuICB2YWxpZGF0ZVNvcnRlZFNldE5hbWUsXG4gIHZhbGlkYXRlU29ydGVkU2V0T2Zmc2V0LFxuICB2YWxpZGF0ZVNvcnRlZFNldFJhbmtzLFxuICB2YWxpZGF0ZVNvcnRlZFNldFNjb3JlcyxcbiAgdmFsaWRhdGVUdGxTZWNvbmRzLFxuICB2YWxpZGF0ZVZhbGlkRm9yU2Vjb25kcyxcbn0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZS9kaXN0L3NyYy9pbnRlcm5hbC91dGlscyc7XG5pbXBvcnQge1xuICBfRGljdGlvbmFyeUdldFJlc3BvbnNlUGFydCxcbiAgX0VDYWNoZVJlc3VsdCxcbiAgX1NvcnRlZFNldEdldFNjb3JlUmVzcG9uc2VQYXJ0LFxufSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL21lc3NhZ2VzL3Jlc3BvbnNlcy9ncnBjLXJlc3BvbnNlLXR5cGVzJztcbmltcG9ydCB7SURhdGFDbGllbnR9IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUvZGlzdC9zcmMvaW50ZXJuYWwvY2xpZW50cyc7XG5pbXBvcnQge0Nvbm5lY3Rpdml0eVN0YXRlfSBmcm9tICdAZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jb25uZWN0aXZpdHktc3RhdGUnO1xuaW1wb3J0IHtDYWNoZUNsaWVudFByb3BzV2l0aENvbmZpZ30gZnJvbSAnLi9jYWNoZS1jbGllbnQtcHJvcHMtd2l0aC1jb25maWcnO1xuaW1wb3J0IGdycGNDYWNoZSA9IGNhY2hlLmNhY2hlX2NsaWVudDtcbmltcG9ydCBfVW5ib3VuZGVkID0gY2FjaGVfY2xpZW50Ll9VbmJvdW5kZWQ7XG5pbXBvcnQgRUNhY2hlUmVzdWx0ID0gY2FjaGVfY2xpZW50LkVDYWNoZVJlc3VsdDtcbmltcG9ydCBfSXRlbUdldFR5cGVSZXNwb25zZSA9IGNhY2hlX2NsaWVudC5fSXRlbUdldFR5cGVSZXNwb25zZTtcbmltcG9ydCB7Z3JwY0NoYW5uZWxPcHRpb25zRnJvbUdycGNDb25maWd9IGZyb20gJy4vZ3JwYy9ncnBjLWNoYW5uZWwtb3B0aW9ucyc7XG5cbmV4cG9ydCBjb25zdCBDT05ORUNUSU9OX0lEX0tFWSA9IFN5bWJvbCgnY29ubmVjdGlvbklEJyk7XG5cbmV4cG9ydCBjbGFzcyBDYWNoZURhdGFDbGllbnQgaW1wbGVtZW50cyBJRGF0YUNsaWVudCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50V3JhcHBlcjogR3JwY0NsaWVudFdyYXBwZXI8Z3JwY0NhY2hlLlNjc0NsaWVudD47XG4gIHByaXZhdGUgcmVhZG9ubHkgdGV4dEVuY29kZXI6IFRleHRFbmNvZGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb247XG4gIHByaXZhdGUgcmVhZG9ubHkgY3JlZGVudGlhbFByb3ZpZGVyOiBDcmVkZW50aWFsUHJvdmlkZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdFR0bFNlY29uZHM6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSByZXF1ZXN0VGltZW91dE1zOiBudW1iZXI7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfUkVRVUVTVF9USU1FT1VUX01TOiBudW1iZXIgPSA1ICogMTAwMDtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXI6IE1vbWVudG9Mb2dnZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXI6IENhY2hlU2VydmljZUVycm9yTWFwcGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IGludGVyY2VwdG9yczogSW50ZXJjZXB0b3JbXTtcblxuICAvKipcbiAgICogQHBhcmFtIHtDYWNoZUNsaWVudFByb3BzfSBwcm9wc1xuICAgKiBAcGFyYW0gZGF0YUNsaWVudElEXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wczogQ2FjaGVDbGllbnRQcm9wc1dpdGhDb25maWcsIGRhdGFDbGllbnRJRDogc3RyaW5nKSB7XG4gICAgdGhpcy5jb25maWd1cmF0aW9uID0gcHJvcHMuY29uZmlndXJhdGlvbjtcbiAgICB0aGlzLmNyZWRlbnRpYWxQcm92aWRlciA9IHByb3BzLmNyZWRlbnRpYWxQcm92aWRlcjtcbiAgICB0aGlzLmxvZ2dlciA9IHRoaXMuY29uZmlndXJhdGlvbi5nZXRMb2dnZXJGYWN0b3J5KCkuZ2V0TG9nZ2VyKHRoaXMpO1xuICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIgPSBuZXcgQ2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoXG4gICAgICBwcm9wcy5jb25maWd1cmF0aW9uLmdldFRocm93T25FcnJvcnMoKVxuICAgICk7XG5cbiAgICBjb25zdCBncnBjQ29uZmlnID0gdGhpcy5jb25maWd1cmF0aW9uXG4gICAgICAuZ2V0VHJhbnNwb3J0U3RyYXRlZ3koKVxuICAgICAgLmdldEdycGNDb25maWcoKTtcblxuICAgIHRoaXMucmVxdWVzdFRpbWVvdXRNcyA9XG4gICAgICBncnBjQ29uZmlnLmdldERlYWRsaW5lTWlsbGlzKCkgfHxcbiAgICAgIENhY2hlRGF0YUNsaWVudC5ERUZBVUxUX1JFUVVFU1RfVElNRU9VVF9NUztcbiAgICB0aGlzLnZhbGlkYXRlUmVxdWVzdFRpbWVvdXQodGhpcy5yZXF1ZXN0VGltZW91dE1zKTtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBDcmVhdGluZyBjYWNoZSBjbGllbnQgdXNpbmcgZW5kcG9pbnQ6ICcke3RoaXMuY3JlZGVudGlhbFByb3ZpZGVyLmdldENhY2hlRW5kcG9pbnQoKX0nYFxuICAgICk7XG5cbiAgICBjb25zdCBjaGFubmVsT3B0aW9ucyA9IGdycGNDaGFubmVsT3B0aW9uc0Zyb21HcnBjQ29uZmlnKGdycGNDb25maWcpO1xuXG4gICAgdGhpcy5jbGllbnRXcmFwcGVyID0gbmV3IElkbGVHcnBjQ2xpZW50V3JhcHBlcih7XG4gICAgICBjbGllbnRGYWN0b3J5Rm46ICgpID0+IHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYENvbnN0cnVjdGluZyBjaGFubmVsIGZvciBjbGllbnRJRCAke2RhdGFDbGllbnRJRH1gKTtcbiAgICAgICAgcmV0dXJuIG5ldyBncnBjQ2FjaGUuU2NzQ2xpZW50KFxuICAgICAgICAgIHRoaXMuY3JlZGVudGlhbFByb3ZpZGVyLmdldENhY2hlRW5kcG9pbnQoKSxcbiAgICAgICAgICBDaGFubmVsQ3JlZGVudGlhbHMuY3JlYXRlU3NsKCksXG4gICAgICAgICAgY2hhbm5lbE9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBsb2dnZXJGYWN0b3J5OiB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0TG9nZ2VyRmFjdG9yeSgpLFxuICAgICAgbWF4SWRsZU1pbGxpczogdGhpcy5jb25maWd1cmF0aW9uXG4gICAgICAgIC5nZXRUcmFuc3BvcnRTdHJhdGVneSgpXG4gICAgICAgIC5nZXRNYXhJZGxlTWlsbGlzKCksXG4gICAgICBtYXhDbGllbnRBZ2VNaWxsaXM6IHRoaXMuY29uZmlndXJhdGlvblxuICAgICAgICAuZ2V0VHJhbnNwb3J0U3RyYXRlZ3koKVxuICAgICAgICAuZ2V0TWF4Q2xpZW50QWdlTWlsbGlzKCksXG4gICAgfSk7XG5cbiAgICB0aGlzLnRleHRFbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyA9IHByb3BzLmRlZmF1bHRUdGxTZWNvbmRzO1xuXG4gICAgLy8gdGhpcyBjb250ZXh0IG9iamVjdCBpcyBjdXJyZW50bHkgaW50ZXJuYWwgb25seSBidXQgY2FuIGJlIGV4dGVuZGVkIGluIHRoZSBDb25maWd1cmF0aW9uIG9iamVjdCBpcyB3ZSB3YW50cyBjbGllbnRzXG4gICAgLy8gdG8gYmUgYWJsZSB0byBzZXQgaXQuXG4gICAgY29uc3QgY29udGV4dDogTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyQ29udGV4dCA9IHt9O1xuICAgIGNvbnRleHRbQ09OTkVDVElPTl9JRF9LRVldID0gZGF0YUNsaWVudElEO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0gdGhpcy5pbml0aWFsaXplSW50ZXJjZXB0b3JzKFxuICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmdldExvZ2dlckZhY3RvcnkoKSxcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5nZXRNaWRkbGV3YXJlcygpLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gIH1cbiAgcHVibGljIGNvbm5lY3QodGltZW91dFNlY29uZHMgPSAxMCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKCdBdHRlbXB0aW5nIHRvIGVhZ2VybHkgY29ubmVjdCB0byBjaGFubmVsJyk7XG4gICAgY29uc3QgZGVhZGxpbmUgPSBuZXcgRGF0ZSgpO1xuICAgIGRlYWRsaW5lLnNldFNlY29uZHMoZGVhZGxpbmUuZ2V0U2Vjb25kcygpICsgdGltZW91dFNlY29uZHMpO1xuXG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdFdpdGhpbkRlYWRsaW5lKGRlYWRsaW5lKTtcbiAgfVxuXG4gIHByaXZhdGUgY29ubmVjdFdpdGhpbkRlYWRsaW5lKGRlYWRsaW5lOiBEYXRlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCBzdGF0ZSBhbmQgaW5pdGlhdGUgYSBjb25uZWN0aW9uXG4gICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB0aGlzLmNsaWVudFdyYXBwZXJcbiAgICAgICAgLmdldENsaWVudCgpXG4gICAgICAgIC5nZXRDaGFubmVsKClcbiAgICAgICAgLmdldENvbm5lY3Rpdml0eVN0YXRlKHRydWUpO1xuXG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgQ2xpZW50IGNvbm5lY3Rpdml0eSBzdGF0ZTogJHtjdXJyZW50U3RhdGV9YCk7XG5cbiAgICAgIGlmIChjdXJyZW50U3RhdGUgPT09IENvbm5lY3Rpdml0eVN0YXRlLlJFQURZKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICBpZiAobm93ID49IGRlYWRsaW5lKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdVbmFibGUgdG8gY29ubmVjdCB0byBNb21lbnRvOiBkZWFkbGluZSBleGNlZWRlZC4nKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlclxuICAgICAgICAuZ2V0Q2xpZW50KClcbiAgICAgICAgLmdldENoYW5uZWwoKVxuICAgICAgICAud2F0Y2hDb25uZWN0aXZpdHlTdGF0ZShjdXJyZW50U3RhdGUsIGRlYWRsaW5lLCAoZXJyb3I/OiBFcnJvcikgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgIGBVbmFibGUgdG8gY29ubmVjdCB0byBNb21lbnRvOiAke2Vycm9yLm5hbWV9LiBjdXJyZW50U3RhdGU6ICR7Y3VycmVudFN0YXRlfSA6XG4gICAgICAgICAgICAgIFBsZWFzZSBjb250YWN0IE1vbWVudG8gaWYgdGhpcyBwZXJzaXN0cy4gYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IHRoaXMuY2xpZW50V3JhcHBlclxuICAgICAgICAgICAgLmdldENsaWVudCgpXG4gICAgICAgICAgICAuZ2V0Q2hhbm5lbCgpXG4gICAgICAgICAgICAuZ2V0Q29ubmVjdGl2aXR5U3RhdGUoZmFsc2UpO1xuXG4gICAgICAgICAgaWYgKG5ld1N0YXRlID09PSBDb25uZWN0aXZpdHlTdGF0ZS5SRUFEWSkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYENvbm5lY3RlZCEgQ3VycmVudCBzdGF0ZTogJHtuZXdTdGF0ZX1gKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5ld1N0YXRlID09PSBDb25uZWN0aXZpdHlTdGF0ZS5DT05ORUNUSU5HKSB7XG4gICAgICAgICAgICAvLyBUaGUgY29ubmVjdGlvbiBnb2VzIHRocm91Z2ggdGhlIENPTk5FQ1RJTkcgc3RhdGUgYmVmb3JlIGJlY29taW5nIFJFQURZLFxuICAgICAgICAgICAgLy8gc28gd2UgbXVzdCB3YXRjaCBpdCB0d2ljZS5cbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBDb25uZWN0aW5nISBDdXJyZW50IHN0YXRlOiAke25ld1N0YXRlfWApO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0V2l0aGluRGVhZGxpbmUoZGVhZGxpbmUpLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgIGBVbmFibGUgdG8gY29ubmVjdCB0byBNb21lbnRvOiBVbmV4cGVjdGVkIGNvbm5lY3Rpb24gc3RhdGU6ICR7bmV3U3RhdGV9Liwgb2xkU3RhdGU6ICR7Y3VycmVudFN0YXRlfVxuICAgICAgICAgICAgICBQbGVhc2UgY29udGFjdCBNb21lbnRvIGlmIHRoaXMgcGVyc2lzdHMuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldEVuZHBvaW50KCk6IHN0cmluZyB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSB0aGlzLmNyZWRlbnRpYWxQcm92aWRlci5nZXRDYWNoZUVuZHBvaW50KCk7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoYFVzaW5nIGNhY2hlIGVuZHBvaW50OiAke2VuZHBvaW50fWApO1xuICAgIHJldHVybiBlbmRwb2ludDtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVSZXF1ZXN0VGltZW91dCh0aW1lb3V0PzogbnVtYmVyKSB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoYFJlcXVlc3QgdGltZW91dCBtczogJHtTdHJpbmcodGltZW91dCl9YCk7XG4gICAgaWYgKHRpbWVvdXQgIT09IHVuZGVmaW5lZCAmJiB0aW1lb3V0IDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgJ3JlcXVlc3QgdGltZW91dCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLidcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0RUNhY2hlUmVzdWx0KHJlc3VsdDogZ3JwY0NhY2hlLkVDYWNoZVJlc3VsdCk6IF9FQ2FjaGVSZXN1bHQge1xuICAgIHN3aXRjaCAocmVzdWx0KSB7XG4gICAgICBjYXNlIGdycGNDYWNoZS5FQ2FjaGVSZXN1bHQuSGl0OlxuICAgICAgICByZXR1cm4gX0VDYWNoZVJlc3VsdC5IaXQ7XG4gICAgICBjYXNlIGdycGNDYWNoZS5FQ2FjaGVSZXN1bHQuSW52YWxpZDpcbiAgICAgICAgcmV0dXJuIF9FQ2FjaGVSZXN1bHQuSW52YWxpZDtcbiAgICAgIGNhc2UgZ3JwY0NhY2hlLkVDYWNoZVJlc3VsdC5NaXNzOlxuICAgICAgICByZXR1cm4gX0VDYWNoZVJlc3VsdC5NaXNzO1xuICAgICAgY2FzZSBncnBjQ2FjaGUuRUNhY2hlUmVzdWx0Lk9rOlxuICAgICAgICByZXR1cm4gX0VDYWNoZVJlc3VsdC5PaztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRJdGVtVHlwZVJlc3VsdChcbiAgICByZXN1bHQ6IF9JdGVtR2V0VHlwZVJlc3BvbnNlLkl0ZW1UeXBlXG4gICk6IEl0ZW1UeXBlIHtcbiAgICBzd2l0Y2ggKHJlc3VsdCkge1xuICAgICAgY2FzZSBfSXRlbUdldFR5cGVSZXNwb25zZS5JdGVtVHlwZS5TQ0FMQVI6XG4gICAgICAgIHJldHVybiBJdGVtVHlwZS5TQ0FMQVI7XG4gICAgICBjYXNlIF9JdGVtR2V0VHlwZVJlc3BvbnNlLkl0ZW1UeXBlLkxJU1Q6XG4gICAgICAgIHJldHVybiBJdGVtVHlwZS5MSVNUO1xuICAgICAgY2FzZSBfSXRlbUdldFR5cGVSZXNwb25zZS5JdGVtVHlwZS5ESUNUSU9OQVJZOlxuICAgICAgICByZXR1cm4gSXRlbVR5cGUuRElDVElPTkFSWTtcbiAgICAgIGNhc2UgX0l0ZW1HZXRUeXBlUmVzcG9uc2UuSXRlbVR5cGUuU0VUOlxuICAgICAgICByZXR1cm4gSXRlbVR5cGUuU0VUO1xuICAgICAgY2FzZSBfSXRlbUdldFR5cGVSZXNwb25zZS5JdGVtVHlwZS5TT1JURURfU0VUOlxuICAgICAgICByZXR1cm4gSXRlbVR5cGUuU09SVEVEX1NFVDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2V0KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB0dGw/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNldC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgaWYgKHR0bCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbGlkYXRlVHRsU2Vjb25kcyh0dGwpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVTZXQuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgdHRsVG9Vc2UgPSB0dGwgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcztcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdzZXQnIHJlcXVlc3Q7IGtleTogJHtrZXkudG9TdHJpbmcoKX0sIHZhbHVlIGxlbmd0aDogJHtcbiAgICAgICAgdmFsdWUubGVuZ3RoXG4gICAgICB9LCB0dGw6ICR7dHRsVG9Vc2UudG9TdHJpbmcoKX1gXG4gICAgKTtcbiAgICBjb25zdCBlbmNvZGVkS2V5ID0gdGhpcy5jb252ZXJ0KGtleSk7XG4gICAgY29uc3QgZW5jb2RlZFZhbHVlID0gdGhpcy5jb252ZXJ0KHZhbHVlKTtcblxuICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmRTZXQoY2FjaGVOYW1lLCBlbmNvZGVkS2V5LCBlbmNvZGVkVmFsdWUsIHR0bFRvVXNlKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNldChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWU6IFVpbnQ4QXJyYXksXG4gICAgdHRsOiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNldC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9TZXRSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX2JvZHk6IHZhbHVlLFxuICAgICAgY2FjaGVfa2V5OiBrZXksXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGwgKiAxMDAwLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU2V0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTZXQuU3VjY2VzcygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZVNldC5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNldEZldGNoKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNldE5hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPENhY2hlU2V0RmV0Y2guUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlU2V0TmFtZShzZXROYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlU2V0RmV0Y2guRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZFNldEZldGNoKGNhY2hlTmFtZSwgdGhpcy5jb252ZXJ0KHNldE5hbWUpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNldEZldGNoKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNldE5hbWU6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZVNldEZldGNoLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX1NldEZldGNoUmVxdWVzdCh7XG4gICAgICBzZXRfbmFtZTogc2V0TmFtZSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLlNldEZldGNoKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcD8ubWlzc2luZykge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTZXRGZXRjaC5NaXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU2V0RmV0Y2guSGl0KHJlc3AuZm91bmQuZWxlbWVudHMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZVNldEZldGNoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2V0QWRkRWxlbWVudHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc2V0TmFtZTogc3RyaW5nLFxuICAgIGVsZW1lbnRzOiBzdHJpbmdbXSB8IFVpbnQ4QXJyYXlbXSxcbiAgICB0dGw6IENvbGxlY3Rpb25UdGwgPSBDb2xsZWN0aW9uVHRsLmZyb21DYWNoZVR0bCgpXG4gICk6IFByb21pc2U8Q2FjaGVTZXRBZGRFbGVtZW50cy5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVTZXROYW1lKHNldE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVTZXRBZGRFbGVtZW50cy5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kU2V0QWRkRWxlbWVudHMoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoc2V0TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnRBcnJheShlbGVtZW50cyksXG4gICAgICB0dGwudHRsTWlsbGlzZWNvbmRzKCkgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyAqIDEwMDAsXG4gICAgICB0dGwucmVmcmVzaFR0bCgpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNldEFkZEVsZW1lbnRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNldE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgZWxlbWVudHM6IFVpbnQ4QXJyYXlbXSxcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlcixcbiAgICByZWZyZXNoVHRsOiBib29sZWFuXG4gICk6IFByb21pc2U8Q2FjaGVTZXRBZGRFbGVtZW50cy5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9TZXRVbmlvblJlcXVlc3Qoe1xuICAgICAgc2V0X25hbWU6IHNldE5hbWUsXG4gICAgICBlbGVtZW50czogZWxlbWVudHMsXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgICByZWZyZXNoX3R0bDogcmVmcmVzaFR0bCxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLlNldFVuaW9uKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZVNldEFkZEVsZW1lbnRzLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTZXRBZGRFbGVtZW50cy5TdWNjZXNzKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZXRSZW1vdmVFbGVtZW50cyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzZXROYW1lOiBzdHJpbmcsXG4gICAgZWxlbWVudHM6IHN0cmluZ1tdIHwgVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVTZXRSZW1vdmVFbGVtZW50cy5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVTZXROYW1lKHNldE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVTZXRSZW1vdmVFbGVtZW50cy5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kU2V0UmVtb3ZlRWxlbWVudHMoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoc2V0TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnRBcnJheShlbGVtZW50cylcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU2V0UmVtb3ZlRWxlbWVudHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc2V0TmFtZTogVWludDhBcnJheSxcbiAgICBlbGVtZW50czogVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVTZXRSZW1vdmVFbGVtZW50cy5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHN1YnRyYWhlbmQgPSBuZXcgZ3JwY0NhY2hlLl9TZXREaWZmZXJlbmNlUmVxdWVzdC5fU3VidHJhaGVuZCh7XG4gICAgICBzZXQ6IG5ldyBncnBjQ2FjaGUuX1NldERpZmZlcmVuY2VSZXF1ZXN0Ll9TdWJ0cmFoZW5kLl9TZXQoe1xuICAgICAgICBlbGVtZW50czogZWxlbWVudHMsXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU2V0RGlmZmVyZW5jZVJlcXVlc3Qoe1xuICAgICAgc2V0X25hbWU6IHNldE5hbWUsXG4gICAgICBzdWJ0cmFoZW5kOiBzdWJ0cmFoZW5kLFxuICAgIH0pO1xuXG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5TZXREaWZmZXJlbmNlKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZVNldFJlbW92ZUVsZW1lbnRzLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTZXRSZW1vdmVFbGVtZW50cy5TdWNjZXNzKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZXRJZk5vdEV4aXN0cyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdmFsdWU6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdHRsPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVTZXRJZk5vdEV4aXN0cy5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgaWYgKHR0bCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbGlkYXRlVHRsU2Vjb25kcyh0dGwpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVTZXRJZk5vdEV4aXN0cy5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdzZXRJZk5vdEV4aXN0cycgcmVxdWVzdDsga2V5OiAke2tleS50b1N0cmluZygpfSwgZmllbGQ6ICR7dmFsdWUudG9TdHJpbmcoKX0sIHR0bFNlY29uZHM6ICR7XG4gICAgICAgIHR0bD8udG9TdHJpbmcoKSA/PyAnbnVsbCdcbiAgICAgIH1gXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZFNldElmTm90RXhpc3RzKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGtleSksXG4gICAgICB0aGlzLmNvbnZlcnQodmFsdWUpLFxuICAgICAgdHRsID8gdHRsICogMTAwMCA6IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShgJ3NldElmTm90RXhpc3RzJyByZXF1ZXN0IHJlc3VsdDogJHtyZXN1bHQudG9TdHJpbmcoKX1gKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU2V0SWZOb3RFeGlzdHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBVaW50OEFycmF5LFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVTZXRJZk5vdEV4aXN0cy5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9TZXRJZk5vdEV4aXN0c1JlcXVlc3Qoe1xuICAgICAgY2FjaGVfa2V5OiBrZXksXG4gICAgICBjYWNoZV9ib2R5OiB2YWx1ZSxcbiAgICAgIHR0bF9taWxsaXNlY29uZHM6IHR0bE1pbGxpc2Vjb25kcyxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU2V0SWZOb3RFeGlzdHMoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHJlc3AucmVzdWx0KSB7XG4gICAgICAgICAgICAgIGNhc2UgJ3N0b3JlZCc6XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTZXRJZk5vdEV4aXN0cy5TdG9yZWQoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ25vdF9zdG9yZWQnOlxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU2V0SWZOb3RFeGlzdHMuTm90U3RvcmVkKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgICBuZXcgQ2FjaGVHZXQuRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgJ1NldElmTm90RXhpc3RzIHJlc3BvbmRlZCB3aXRoIGFuIHVua25vd24gcmVzdWx0J1xuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZVNldElmTm90RXhpc3RzLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nIHwgVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlRGVsZXRlLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZURlbGV0ZS5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci50cmFjZShgSXNzdWluZyAnZGVsZXRlJyByZXF1ZXN0OyBrZXk6ICR7a2V5LnRvU3RyaW5nKCl9YCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZERlbGV0ZShjYWNoZU5hbWUsIHRoaXMuY29udmVydChrZXkpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZERlbGV0ZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZURlbGV0ZS5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9EZWxldGVSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX2tleToga2V5LFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuRGVsZXRlKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEZWxldGUuU3VjY2VzcygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZURlbGV0ZS5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUdldC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVHZXQuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYElzc3VpbmcgJ2dldCcgcmVxdWVzdDsga2V5OiAke2tleS50b1N0cmluZygpfWApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZEdldChjYWNoZU5hbWUsIHRoaXMuY29udmVydChrZXkpKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShgJ2dldCcgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZEdldChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUdldC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9HZXRSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX2tleToga2V5LFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5HZXQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHJlc3AucmVzdWx0KSB7XG4gICAgICAgICAgICAgIGNhc2UgZ3JwY0NhY2hlLkVDYWNoZVJlc3VsdC5NaXNzOlxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlR2V0Lk1pc3MoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgZ3JwY0NhY2hlLkVDYWNoZVJlc3VsdC5IaXQ6XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVHZXQuSGl0KHJlc3AuY2FjaGVfYm9keSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIGdycGNDYWNoZS5FQ2FjaGVSZXN1bHQuSW52YWxpZDpcbiAgICAgICAgICAgICAgY2FzZSBncnBjQ2FjaGUuRUNhY2hlUmVzdWx0Lk9rOlxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlR2V0LkVycm9yKG5ldyBVbmtub3duRXJyb3IocmVzcC5tZXNzYWdlKSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgICBuZXcgQ2FjaGVHZXQuRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQ6ICcgKyByZXNwLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgQ2FjaGVHZXQuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsaXN0Q29uY2F0ZW5hdGVCYWNrKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBzdHJpbmcsXG4gICAgdmFsdWVzOiBzdHJpbmdbXSB8IFVpbnQ4QXJyYXlbXSxcbiAgICB0cnVuY2F0ZUZyb250VG9TaXplPzogbnVtYmVyLFxuICAgIHR0bDogQ29sbGVjdGlvblR0bCA9IENvbGxlY3Rpb25UdGwuZnJvbUNhY2hlVHRsKClcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RDb25jYXRlbmF0ZUJhY2suUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlTGlzdE5hbWUobGlzdE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVMaXN0Q29uY2F0ZW5hdGVCYWNrLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnbGlzdENvbmNhdGVuYXRlQmFjaycgcmVxdWVzdDsgbGlzdE5hbWU6ICR7bGlzdE5hbWV9LCB2YWx1ZXMgbGVuZ3RoOiAke1xuICAgICAgICB2YWx1ZXMubGVuZ3RoXG4gICAgICB9LCAke3R0bC50b1N0cmluZygpfSwgdHJ1bmNhdGVGcm9udFRvU2l6ZTogJHtcbiAgICAgICAgdHJ1bmNhdGVGcm9udFRvU2l6ZT8udG9TdHJpbmcoKSA/PyAnbnVsbCdcbiAgICAgIH1gXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZExpc3RDb25jYXRlbmF0ZUJhY2soXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQobGlzdE5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0QXJyYXkodmFsdWVzKSxcbiAgICAgIHR0bC50dGxNaWxsaXNlY29uZHMoKSB8fCB0aGlzLmRlZmF1bHRUdGxTZWNvbmRzICogMTAwMCxcbiAgICAgIHR0bC5yZWZyZXNoVHRsKCksXG4gICAgICB0cnVuY2F0ZUZyb250VG9TaXplXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGAnbGlzdENvbmNhdGVuYXRlQmFjaycgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZExpc3RDb25jYXRlbmF0ZUJhY2soXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWVzOiBVaW50OEFycmF5W10sXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgcmVmcmVzaFR0bDogYm9vbGVhbixcbiAgICB0cnVuY2F0ZUZyb250VG9TaXplPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0Q29uY2F0ZW5hdGVCYWNrLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0xpc3RDb25jYXRlbmF0ZUJhY2tSZXF1ZXN0KHtcbiAgICAgIGxpc3RfbmFtZTogbGlzdE5hbWUsXG4gICAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICAgIHR0bF9taWxsaXNlY29uZHM6IHR0bE1pbGxpc2Vjb25kcyxcbiAgICAgIHJlZnJlc2hfdHRsOiByZWZyZXNoVHRsLFxuICAgICAgdHJ1bmNhdGVfZnJvbnRfdG9fc2l6ZTogdHJ1bmNhdGVGcm9udFRvU2l6ZSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkxpc3RDb25jYXRlbmF0ZUJhY2soXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RDb25jYXRlbmF0ZUJhY2suU3VjY2VzcyhyZXNwLmxpc3RfbGVuZ3RoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PlxuICAgICAgICAgICAgICAgIG5ldyBDYWNoZUxpc3RDb25jYXRlbmF0ZUJhY2suRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsaXN0Q29uY2F0ZW5hdGVGcm9udChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlczogc3RyaW5nW10gfCBVaW50OEFycmF5W10sXG4gICAgdHJ1bmNhdGVCYWNrVG9TaXplPzogbnVtYmVyLFxuICAgIHR0bDogQ29sbGVjdGlvblR0bCA9IENvbGxlY3Rpb25UdGwuZnJvbUNhY2hlVHRsKClcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RDb25jYXRlbmF0ZUZyb250LlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZUxpc3ROYW1lKGxpc3ROYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlTGlzdENvbmNhdGVuYXRlRnJvbnQuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdsaXN0Q29uY2F0ZW5hdGVGcm9udCcgcmVxdWVzdDsgbGlzdE5hbWU6ICR7bGlzdE5hbWV9LCB2YWx1ZXMgbGVuZ3RoOiAke1xuICAgICAgICB2YWx1ZXMubGVuZ3RoXG4gICAgICB9LCAke3R0bC50b1N0cmluZygpfSwgdHJ1bmNhdGVCYWNrVG9TaXplOiAke1xuICAgICAgICB0cnVuY2F0ZUJhY2tUb1NpemU/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgICB9YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRMaXN0Q29uY2F0ZW5hdGVGcm9udChcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChsaXN0TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnRBcnJheSh2YWx1ZXMpLFxuICAgICAgdHRsLnR0bE1pbGxpc2Vjb25kcygpIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwLFxuICAgICAgdHRsLnJlZnJlc2hUdGwoKSxcbiAgICAgIHRydW5jYXRlQmFja1RvU2l6ZVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2xpc3RDb25jYXRlbmF0ZUZyb250JyByZXF1ZXN0IHJlc3VsdDogJHtyZXN1bHQudG9TdHJpbmcoKX1gXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kTGlzdENvbmNhdGVuYXRlRnJvbnQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWVzOiBVaW50OEFycmF5W10sXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgcmVmcmVzaFR0bDogYm9vbGVhbixcbiAgICB0cnVuY2F0ZUJhY2tUb1NpemU/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RDb25jYXRlbmF0ZUZyb250LlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0xpc3RDb25jYXRlbmF0ZUZyb250UmVxdWVzdCh7XG4gICAgICBsaXN0X25hbWU6IGxpc3ROYW1lLFxuICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgICByZWZyZXNoX3R0bDogcmVmcmVzaFR0bCxcbiAgICAgIHRydW5jYXRlX2JhY2tfdG9fc2l6ZTogdHJ1bmNhdGVCYWNrVG9TaXplLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuTGlzdENvbmNhdGVuYXRlRnJvbnQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RDb25jYXRlbmF0ZUZyb250LlN1Y2Nlc3MocmVzcC5saXN0X2xlbmd0aCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT5cbiAgICAgICAgICAgICAgICBuZXcgQ2FjaGVMaXN0Q29uY2F0ZW5hdGVGcm9udC5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RGZXRjaChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nLFxuICAgIHN0YXJ0SW5kZXg/OiBudW1iZXIsXG4gICAgZW5kSW5kZXg/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RGZXRjaC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVMaXN0TmFtZShsaXN0TmFtZSk7XG4gICAgICB2YWxpZGF0ZUxpc3RTbGljZVN0YXJ0RW5kKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlTGlzdEZldGNoLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCJJc3N1aW5nICdsaXN0RmV0Y2gnIHJlcXVlc3Q7IGxpc3ROYW1lOiAlcywgc3RhcnRJbmRleDogJXMsIGVuZEluZGV4OiAlc1wiLFxuICAgICAgbGlzdE5hbWUsXG4gICAgICBzdGFydEluZGV4ID8/ICdudWxsJyxcbiAgICAgIGVuZEluZGV4ID8/ICdudWxsJ1xuICAgICk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kTGlzdEZldGNoKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGxpc3ROYW1lKSxcbiAgICAgIHN0YXJ0SW5kZXgsXG4gICAgICBlbmRJbmRleFxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXCInbGlzdEZldGNoJyByZXF1ZXN0IHJlc3VsdDogJXNcIiwgcmVzdWx0LnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRMaXN0RmV0Y2goXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgc3RhcnQ/OiBudW1iZXIsXG4gICAgZW5kPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0RmV0Y2guUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fTGlzdEZldGNoUmVxdWVzdCh7XG4gICAgICBsaXN0X25hbWU6IGxpc3ROYW1lLFxuICAgIH0pO1xuICAgIGlmIChzdGFydCkge1xuICAgICAgcmVxdWVzdC5pbmNsdXNpdmVfc3RhcnQgPSBzdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdC51bmJvdW5kZWRfc3RhcnQgPSBuZXcgX1VuYm91bmRlZCgpO1xuICAgIH1cbiAgICBpZiAoZW5kKSB7XG4gICAgICByZXF1ZXN0LmV4Y2x1c2l2ZV9lbmQgPSBlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QudW5ib3VuZGVkX2VuZCA9IG5ldyBfVW5ib3VuZGVkKCk7XG4gICAgfVxuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5MaXN0RmV0Y2goXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwPy5taXNzaW5nKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RGZXRjaC5NaXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdEZldGNoLkhpdChyZXNwLmZvdW5kLnZhbHVlcykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IENhY2hlTGlzdEZldGNoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdFJldGFpbihcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nLFxuICAgIHN0YXJ0SW5kZXg/OiBudW1iZXIsXG4gICAgZW5kSW5kZXg/OiBudW1iZXIsXG4gICAgdHRsOiBDb2xsZWN0aW9uVHRsID0gQ29sbGVjdGlvblR0bC5mcm9tQ2FjaGVUdGwoKVxuICApOiBQcm9taXNlPENhY2hlTGlzdFJldGFpbi5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVMaXN0TmFtZShsaXN0TmFtZSk7XG4gICAgICB2YWxpZGF0ZUxpc3RTbGljZVN0YXJ0RW5kKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlTGlzdFJldGFpbi5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiSXNzdWluZyAnbGlzdFJldGFpbicgcmVxdWVzdDsgbGlzdE5hbWU6ICVzLCBzdGFydEluZGV4OiAlcywgZW5kSW5kZXg6ICVzLCB0dGw6ICVzXCIsXG4gICAgICBsaXN0TmFtZSxcbiAgICAgIHN0YXJ0SW5kZXggPz8gJ251bGwnLFxuICAgICAgZW5kSW5kZXggPz8gJ251bGwnLFxuICAgICAgdHRsLnR0bFNlY29uZHMudG9TdHJpbmcoKSA/PyAnbnVsbCdcbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZExpc3RSZXRhaW4oXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQobGlzdE5hbWUpLFxuICAgICAgc3RhcnRJbmRleCxcbiAgICAgIGVuZEluZGV4LFxuICAgICAgdHRsLnR0bE1pbGxpc2Vjb25kcygpIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwLFxuICAgICAgdHRsLnJlZnJlc2hUdGwoKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXCInbGlzdFJldGFpbicgcmVxdWVzdCByZXN1bHQ6ICVzXCIsIHJlc3VsdC50b1N0cmluZygpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kTGlzdFJldGFpbihcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogVWludDhBcnJheSxcbiAgICBzdGFydD86IG51bWJlcixcbiAgICBlbmQ/OiBudW1iZXIsXG4gICAgdHRsTWlsbGlzZWNvbmRzPzogbnVtYmVyLFxuICAgIHJlZnJlc2hUdGw/OiBib29sZWFuXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UmV0YWluLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0xpc3RSZXRhaW5SZXF1ZXN0KHtcbiAgICAgIGxpc3RfbmFtZTogbGlzdE5hbWUsXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgICByZWZyZXNoX3R0bDogcmVmcmVzaFR0bCxcbiAgICB9KTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHJlcXVlc3QuaW5jbHVzaXZlX3N0YXJ0ID0gc3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QudW5ib3VuZGVkX3N0YXJ0ID0gbmV3IF9VbmJvdW5kZWQoKTtcbiAgICB9XG4gICAgaWYgKGVuZCkge1xuICAgICAgcmVxdWVzdC5leGNsdXNpdmVfZW5kID0gZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0LnVuYm91bmRlZF9lbmQgPSBuZXcgX1VuYm91bmRlZCgpO1xuICAgIH1cbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuTGlzdFJldGFpbihcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFJldGFpbi5TdWNjZXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IENhY2hlTGlzdFJldGFpbi5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RMZW5ndGgoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPENhY2hlTGlzdExlbmd0aC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVMaXN0TmFtZShsaXN0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZUxpc3RMZW5ndGguRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYElzc3VpbmcgJ2xpc3RMZW5ndGgnIHJlcXVlc3Q7IGxpc3ROYW1lOiAke2xpc3ROYW1lfWApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZExpc3RMZW5ndGgoY2FjaGVOYW1lLCB0aGlzLmNvbnZlcnQobGlzdE5hbWUpKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShgJ2xpc3RMZW5ndGgnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRMaXN0TGVuZ3RoKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVMaXN0TGVuZ3RoLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0xpc3RMZW5ndGhSZXF1ZXN0KHtcbiAgICAgIGxpc3RfbmFtZTogbGlzdE5hbWUsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkxpc3RMZW5ndGgoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwPy5taXNzaW5nKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RMZW5ndGguTWlzcygpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/LmZvdW5kKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RMZW5ndGguSGl0KHJlc3AuZm91bmQubGVuZ3RoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgQ2FjaGVMaXN0TGVuZ3RoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdFBvcEJhY2soXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPENhY2hlTGlzdFBvcEJhY2suUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlTGlzdE5hbWUobGlzdE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVMaXN0UG9wQmFjay5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiSXNzdWluZyAnbGlzdFBvcEJhY2snIHJlcXVlc3RcIik7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kTGlzdFBvcEJhY2soXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQobGlzdE5hbWUpXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShgJ2xpc3RQb3BCYWNrJyByZXF1ZXN0IHJlc3VsdDogJHtyZXN1bHQudG9TdHJpbmcoKX1gKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kTGlzdFBvcEJhY2soXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RQb3BCYWNrLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0xpc3RQb3BCYWNrUmVxdWVzdCh7XG4gICAgICBsaXN0X25hbWU6IGxpc3ROYW1lLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5MaXN0UG9wQmFjayhcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFBvcEJhY2suTWlzcygpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/LmZvdW5kKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RQb3BCYWNrLkhpdChyZXNwLmZvdW5kLmJhY2spKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZUxpc3RQb3BCYWNrLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdFBvcEZyb250KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RQb3BGcm9udC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVMaXN0TmFtZShsaXN0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZUxpc3RQb3BGcm9udC5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiSXNzdWluZyAnbGlzdFBvcEZyb250JyByZXF1ZXN0XCIpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZExpc3RQb3BGcm9udChcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChsaXN0TmFtZSlcbiAgICApO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKGAnbGlzdFBvcEZyb250JyByZXF1ZXN0IHJlc3VsdDogJHtyZXN1bHQudG9TdHJpbmcoKX1gKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kTGlzdFBvcEZyb250KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UG9wRnJvbnQuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fTGlzdFBvcEZyb250UmVxdWVzdCh7XG4gICAgICBsaXN0X25hbWU6IGxpc3ROYW1lLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5MaXN0UG9wRnJvbnQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwPy5taXNzaW5nKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RQb3BGcm9udC5NaXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFBvcEZyb250LkhpdChyZXNwLmZvdW5kLmZyb250KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgQ2FjaGVMaXN0UG9wRnJvbnQuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsaXN0UHVzaEJhY2soXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB0cnVuY2F0ZUZyb250VG9TaXplPzogbnVtYmVyLFxuICAgIHR0bDogQ29sbGVjdGlvblR0bCA9IENvbGxlY3Rpb25UdGwuZnJvbUNhY2hlVHRsKClcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RQdXNoQmFjay5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVMaXN0TmFtZShsaXN0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZUxpc3RQdXNoQmFjay5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2xpc3RQdXNoQmFjaycgcmVxdWVzdDsgbGlzdE5hbWU6ICR7bGlzdE5hbWV9LCB2YWx1ZSBsZW5ndGg6ICR7XG4gICAgICAgIHZhbHVlLmxlbmd0aFxuICAgICAgfSwgJHt0dGwudG9TdHJpbmcoKX0sIHRydW5jYXRlRnJvbnRUb1NpemU6ICR7XG4gICAgICAgIHRydW5jYXRlRnJvbnRUb1NpemU/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgICB9YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRMaXN0UHVzaEJhY2soXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQobGlzdE5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0KHZhbHVlKSxcbiAgICAgIHR0bC50dGxNaWxsaXNlY29uZHMoKSB8fCB0aGlzLmRlZmF1bHRUdGxTZWNvbmRzICogMTAwMCxcbiAgICAgIHR0bC5yZWZyZXNoVHRsKCksXG4gICAgICB0cnVuY2F0ZUZyb250VG9TaXplXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShgJ2xpc3RQdXNoQmFjaycgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZExpc3RQdXNoQmFjayhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogVWludDhBcnJheSxcbiAgICB2YWx1ZTogVWludDhBcnJheSxcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlcixcbiAgICByZWZyZXNoVHRsOiBib29sZWFuLFxuICAgIHRydW5jYXRlRnJvbnRUb1NpemU/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RQdXNoQmFjay5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9MaXN0UHVzaEJhY2tSZXF1ZXN0KHtcbiAgICAgIGxpc3RfbmFtZTogbGlzdE5hbWUsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgICByZWZyZXNoX3R0bDogcmVmcmVzaFR0bCxcbiAgICAgIHRydW5jYXRlX2Zyb250X3RvX3NpemU6IHRydW5jYXRlRnJvbnRUb1NpemUsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5MaXN0UHVzaEJhY2soXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RQdXNoQmFjay5TdWNjZXNzKHJlc3AubGlzdF9sZW5ndGgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZUxpc3RQdXNoQmFjay5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RQdXNoRnJvbnQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB0cnVuY2F0ZUJhY2tUb1NpemU/OiBudW1iZXIsXG4gICAgdHRsOiBDb2xsZWN0aW9uVHRsID0gQ29sbGVjdGlvblR0bC5mcm9tQ2FjaGVUdGwoKVxuICApOiBQcm9taXNlPENhY2hlTGlzdFB1c2hGcm9udC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVMaXN0TmFtZShsaXN0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZUxpc3RQdXNoRnJvbnQuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdsaXN0UHVzaEZyb250JyByZXF1ZXN0OyBsaXN0TmFtZTogJHtsaXN0TmFtZX0sIHZhbHVlIGxlbmd0aDogJHtcbiAgICAgICAgdmFsdWUubGVuZ3RoXG4gICAgICB9LCAke3R0bC50b1N0cmluZygpfSwgdHJ1bmNhdGVCYWNrVG9TaXplOiAke1xuICAgICAgICB0cnVuY2F0ZUJhY2tUb1NpemU/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgICB9YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRMaXN0UHVzaEZyb250KFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGxpc3ROYW1lKSxcbiAgICAgIHRoaXMuY29udmVydCh2YWx1ZSksXG4gICAgICB0dGwudHRsTWlsbGlzZWNvbmRzKCkgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyAqIDEwMDAsXG4gICAgICB0dGwucmVmcmVzaFR0bCgpLFxuICAgICAgdHJ1bmNhdGVCYWNrVG9TaXplXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShgJ2xpc3RQdXNoRnJvbnQnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRMaXN0UHVzaEZyb250KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBVaW50OEFycmF5LFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyLFxuICAgIHJlZnJlc2hUdGw6IGJvb2xlYW4sXG4gICAgdHJ1bmNhdGVCYWNrVG9TaXplPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UHVzaEZyb250LlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0xpc3RQdXNoRnJvbnRSZXF1ZXN0KHtcbiAgICAgIGxpc3RfbmFtZTogbGlzdE5hbWUsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgICByZWZyZXNoX3R0bDogcmVmcmVzaFR0bCxcbiAgICAgIHRydW5jYXRlX2JhY2tfdG9fc2l6ZTogdHJ1bmNhdGVCYWNrVG9TaXplLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuTGlzdFB1c2hGcm9udChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFB1c2hGcm9udC5TdWNjZXNzKHJlc3AubGlzdF9sZW5ndGgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZUxpc3RQdXNoRnJvbnQuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsaXN0UmVtb3ZlVmFsdWUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlTGlzdFJlbW92ZVZhbHVlLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZUxpc3ROYW1lKGxpc3ROYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlTGlzdFJlbW92ZVZhbHVlLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnbGlzdFJlbW92ZVZhbHVlJyByZXF1ZXN0OyBsaXN0TmFtZTogJHtsaXN0TmFtZX0sIHZhbHVlIGxlbmd0aDogJHt2YWx1ZS5sZW5ndGh9YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRMaXN0UmVtb3ZlVmFsdWUoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQobGlzdE5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0KHZhbHVlKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYCdsaXN0UmVtb3ZlVmFsdWUnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRMaXN0UmVtb3ZlVmFsdWUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWU6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RSZW1vdmVWYWx1ZS5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9MaXN0UmVtb3ZlUmVxdWVzdCh7XG4gICAgICBsaXN0X25hbWU6IGxpc3ROYW1lLFxuICAgICAgYWxsX2VsZW1lbnRzX3dpdGhfdmFsdWU6IHZhbHVlLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuTGlzdFJlbW92ZShcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFJlbW92ZVZhbHVlLlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgQ2FjaGVMaXN0UmVtb3ZlVmFsdWUuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkaWN0aW9uYXJ5RmV0Y2goXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeUZldGNoLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZURpY3Rpb25hcnlOYW1lKGRpY3Rpb25hcnlOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlRGljdGlvbmFyeUZldGNoLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2RpY3Rpb25hcnlGZXRjaCcgcmVxdWVzdDsgZGljdGlvbmFyeU5hbWU6ICR7ZGljdGlvbmFyeU5hbWV9YFxuICAgICk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kRGljdGlvbmFyeUZldGNoKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGRpY3Rpb25hcnlOYW1lKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYCdkaWN0aW9uYXJ5RmV0Y2gnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREaWN0aW9uYXJ5RmV0Y2goXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlGZXRjaC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9EaWN0aW9uYXJ5RmV0Y2hSZXF1ZXN0KHtcbiAgICAgIGRpY3Rpb25hcnlfbmFtZTogZGljdGlvbmFyeU5hbWUsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5EaWN0aW9uYXJ5RmV0Y2goXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwPy5mb3VuZCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEaWN0aW9uYXJ5RmV0Y2guSGl0KHJlc3AuZm91bmQuaXRlbXMpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlRGljdGlvbmFyeUZldGNoLk1pc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgQ2FjaGVEaWN0aW9uYXJ5RmV0Y2guRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkaWN0aW9uYXJ5U2V0RmllbGQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IHN0cmluZyxcbiAgICBmaWVsZDogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB0dGw6IENvbGxlY3Rpb25UdGwgPSBDb2xsZWN0aW9uVHRsLmZyb21DYWNoZVR0bCgpXG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5U2V0RmllbGQuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlRGljdGlvbmFyeU5hbWUoZGljdGlvbmFyeU5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVEaWN0aW9uYXJ5U2V0RmllbGQuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnZGljdGlvbmFyeVNldEZpZWxkJyByZXF1ZXN0OyBmaWVsZDogJHtmaWVsZC50b1N0cmluZygpfSwgdmFsdWUgbGVuZ3RoOiAke1xuICAgICAgICB2YWx1ZS5sZW5ndGhcbiAgICAgIH0sIHR0bDogJHt0dGwudHRsU2Vjb25kcy50b1N0cmluZygpID8/ICdudWxsJ31gXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZERpY3Rpb25hcnlTZXRGaWVsZChcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChkaWN0aW9uYXJ5TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnQoZmllbGQpLFxuICAgICAgdGhpcy5jb252ZXJ0KHZhbHVlKSxcbiAgICAgIHR0bC50dGxNaWxsaXNlY29uZHMoKSB8fCB0aGlzLmRlZmF1bHRUdGxTZWNvbmRzICogMTAwMCxcbiAgICAgIHR0bC5yZWZyZXNoVHRsKClcbiAgICApO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYCdkaWN0aW9uYXJ5U2V0RmllbGQnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREaWN0aW9uYXJ5U2V0RmllbGQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IFVpbnQ4QXJyYXksXG4gICAgZmllbGQ6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWU6IFVpbnQ4QXJyYXksXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgcmVmcmVzaFR0bDogYm9vbGVhblxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeVNldEZpZWxkLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0RpY3Rpb25hcnlTZXRSZXF1ZXN0KHtcbiAgICAgIGRpY3Rpb25hcnlfbmFtZTogZGljdGlvbmFyeU5hbWUsXG4gICAgICBpdGVtczogdGhpcy50b1NpbmdsZXRvbkZpZWxkVmFsdWVQYWlyKGZpZWxkLCB2YWx1ZSksXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgICByZWZyZXNoX3R0bDogcmVmcmVzaFR0bCxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkRpY3Rpb25hcnlTZXQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlTZXRGaWVsZC5TdWNjZXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IENhY2hlRGljdGlvbmFyeVNldEZpZWxkLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGljdGlvbmFyeVNldEZpZWxkcyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogc3RyaW5nLFxuICAgIGVsZW1lbnRzOlxuICAgICAgfCBNYXA8c3RyaW5nIHwgVWludDhBcnJheSwgc3RyaW5nIHwgVWludDhBcnJheT5cbiAgICAgIHwgUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgVWludDhBcnJheT5cbiAgICAgIHwgQXJyYXk8W3N0cmluZywgc3RyaW5nIHwgVWludDhBcnJheV0+LFxuICAgIHR0bDogQ29sbGVjdGlvblR0bCA9IENvbGxlY3Rpb25UdGwuZnJvbUNhY2hlVHRsKClcbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlTZXRGaWVsZHMuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlRGljdGlvbmFyeU5hbWUoZGljdGlvbmFyeU5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVEaWN0aW9uYXJ5U2V0RmllbGRzLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2RpY3Rpb25hcnlTZXRGaWVsZHMnIHJlcXVlc3Q7IGVsZW1lbnRzOiAke2VsZW1lbnRzLnRvU3RyaW5nKCl9LCB0dGw6ICR7XG4gICAgICAgIHR0bC50dGxTZWNvbmRzLnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgICB9YFxuICAgICk7XG5cbiAgICBjb25zdCBkaWN0aW9uYXJ5RmllbGRWYWx1ZVBhaXJzID0gdGhpcy5jb252ZXJ0RWxlbWVudHMoZWxlbWVudHMpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kRGljdGlvbmFyeVNldEZpZWxkcyhcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChkaWN0aW9uYXJ5TmFtZSksXG4gICAgICBkaWN0aW9uYXJ5RmllbGRWYWx1ZVBhaXJzLFxuICAgICAgdHRsLnR0bE1pbGxpc2Vjb25kcygpIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwLFxuICAgICAgdHRsLnJlZnJlc2hUdGwoKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2RpY3Rpb25hcnlTZXRGaWVsZHMnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREaWN0aW9uYXJ5U2V0RmllbGRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBVaW50OEFycmF5LFxuICAgIGVsZW1lbnRzOiBncnBjQ2FjaGUuX0RpY3Rpb25hcnlGaWVsZFZhbHVlUGFpcltdLFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyLFxuICAgIHJlZnJlc2hUdGw6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlTZXRGaWVsZHMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fRGljdGlvbmFyeVNldFJlcXVlc3Qoe1xuICAgICAgZGljdGlvbmFyeV9uYW1lOiBkaWN0aW9uYXJ5TmFtZSxcbiAgICAgIGl0ZW1zOiBlbGVtZW50cyxcbiAgICAgIHR0bF9taWxsaXNlY29uZHM6IHR0bE1pbGxpc2Vjb25kcyxcbiAgICAgIHJlZnJlc2hfdHRsOiByZWZyZXNoVHRsLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuRGljdGlvbmFyeVNldChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlRGljdGlvbmFyeVNldEZpZWxkcy5TdWNjZXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT5cbiAgICAgICAgICAgICAgICBuZXcgQ2FjaGVEaWN0aW9uYXJ5U2V0RmllbGRzLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGljdGlvbmFyeUdldEZpZWxkKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBzdHJpbmcsXG4gICAgZmllbGQ6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVEaWN0aW9uYXJ5TmFtZShkaWN0aW9uYXJ5TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5FcnJvcihlcnIsIHRoaXMuY29udmVydChmaWVsZCkpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdkaWN0aW9uYXJ5R2V0RmllbGQnIHJlcXVlc3Q7IGZpZWxkOiAke2ZpZWxkLnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kRGljdGlvbmFyeUdldEZpZWxkKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGRpY3Rpb25hcnlOYW1lKSxcbiAgICAgIHRoaXMuY29udmVydChmaWVsZClcbiAgICApO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYCdkaWN0aW9uYXJ5R2V0RmllbGQnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREaWN0aW9uYXJ5R2V0RmllbGQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IFVpbnQ4QXJyYXksXG4gICAgZmllbGQ6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9EaWN0aW9uYXJ5R2V0UmVxdWVzdCh7XG4gICAgICBkaWN0aW9uYXJ5X25hbWU6IGRpY3Rpb25hcnlOYW1lLFxuICAgICAgZmllbGRzOiBbZmllbGRdLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5EaWN0aW9uYXJ5R2V0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcD8uZGljdGlvbmFyeSA9PT0gJ21pc3NpbmcnKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5NaXNzKGZpZWxkKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNwPy5kaWN0aW9uYXJ5ID09PSAnZm91bmQnKSB7XG4gICAgICAgICAgICBpZiAocmVzcD8uZm91bmQuaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgbmV3IENhY2hlRGljdGlvbmFyeUdldEZpZWxkLkVycm9yKFxuICAgICAgICAgICAgICAgICAgbmV3IFVua25vd25FcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ19EaWN0aW9uYXJ5R2V0UmVzcG9uc2VSZXNwb25zZSBjb250YWluZWQgbm8gZGF0YSBidXQgd2FzIGZvdW5kJ1xuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIGZpZWxkXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgcmVzcD8uZm91bmQuaXRlbXNbMF0ucmVzdWx0ID09PSBncnBjQ2FjaGUuRUNhY2hlUmVzdWx0Lk1pc3NcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5NaXNzKGZpZWxkKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgIG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5IaXQoXG4gICAgICAgICAgICAgICAgICByZXNwPy5mb3VuZC5pdGVtc1swXS5jYWNoZV9ib2R5LFxuICAgICAgICAgICAgICAgICAgZmllbGRcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PlxuICAgICAgICAgICAgICAgIG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5FcnJvcihlLCBmaWVsZCksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkaWN0aW9uYXJ5R2V0RmllbGRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBzdHJpbmcsXG4gICAgZmllbGRzOiBzdHJpbmdbXSB8IFVpbnQ4QXJyYXlbXVxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeUdldEZpZWxkcy5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVEaWN0aW9uYXJ5TmFtZShkaWN0aW9uYXJ5TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZHMuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnZGljdGlvbmFyeUdldEZpZWxkcycgcmVxdWVzdDsgZmllbGRzOiAke2ZpZWxkcy50b1N0cmluZygpfWBcbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZERpY3Rpb25hcnlHZXRGaWVsZHMoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoZGljdGlvbmFyeU5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0QXJyYXkoZmllbGRzKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2RpY3Rpb25hcnlHZXRGaWVsZHMnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREaWN0aW9uYXJ5R2V0RmllbGRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBVaW50OEFycmF5LFxuICAgIGZpZWxkczogVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5R2V0RmllbGRzLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0RpY3Rpb25hcnlHZXRSZXF1ZXN0KHtcbiAgICAgIGRpY3Rpb25hcnlfbmFtZTogZGljdGlvbmFyeU5hbWUsXG4gICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuRGljdGlvbmFyeUdldChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3A/LmRpY3Rpb25hcnkgPT09ICdmb3VuZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gcmVzcC5mb3VuZC5pdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY29udmVydEVDYWNoZVJlc3VsdChpdGVtLnJlc3VsdCk7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgX0RpY3Rpb25hcnlHZXRSZXNwb25zZVBhcnQocmVzdWx0LCBpdGVtLmNhY2hlX2JvZHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZHMuSGl0KGl0ZW1zLCBmaWVsZHMpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/LmRpY3Rpb25hcnkgPT09ICdtaXNzaW5nJykge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEaWN0aW9uYXJ5R2V0RmllbGRzLk1pc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PlxuICAgICAgICAgICAgICAgIG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZHMuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkaWN0aW9uYXJ5UmVtb3ZlRmllbGQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IHN0cmluZyxcbiAgICBmaWVsZDogc3RyaW5nIHwgVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZURpY3Rpb25hcnlOYW1lKGRpY3Rpb25hcnlOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2RpY3Rpb25hcnlSZW1vdmVGaWVsZCcgcmVxdWVzdDsgZmllbGQ6ICR7ZmllbGQudG9TdHJpbmcoKX1gXG4gICAgKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmREaWN0aW9uYXJ5UmVtb3ZlRmllbGQoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoZGljdGlvbmFyeU5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0KGZpZWxkKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2RpY3Rpb25hcnlSZW1vdmVGaWVsZCcgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZERpY3Rpb25hcnlSZW1vdmVGaWVsZChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogVWludDhBcnJheSxcbiAgICBmaWVsZDogVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0RpY3Rpb25hcnlEZWxldGVSZXF1ZXN0KHtcbiAgICAgIGRpY3Rpb25hcnlfbmFtZTogZGljdGlvbmFyeU5hbWUsXG4gICAgICBzb21lOiBuZXcgZ3JwY0NhY2hlLl9EaWN0aW9uYXJ5RGVsZXRlUmVxdWVzdC5Tb21lKCksXG4gICAgfSk7XG4gICAgcmVxdWVzdC5zb21lLmZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuRGljdGlvbmFyeURlbGV0ZShcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkLlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PlxuICAgICAgICAgICAgICAgIG5ldyBDYWNoZURpY3Rpb25hcnlSZW1vdmVGaWVsZC5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRpY3Rpb25hcnlSZW1vdmVGaWVsZHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IHN0cmluZyxcbiAgICBmaWVsZHM6IHN0cmluZ1tdIHwgVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5UmVtb3ZlRmllbGRzLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZURpY3Rpb25hcnlOYW1lKGRpY3Rpb25hcnlOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkcy5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdkaWN0aW9uYXJ5UmVtb3ZlRmllbGRzJyByZXF1ZXN0OyBmaWVsZHM6ICR7ZmllbGRzLnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kRGljdGlvbmFyeVJlbW92ZUZpZWxkcyhcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChkaWN0aW9uYXJ5TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnRBcnJheShmaWVsZHMpXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGAnZGljdGlvbmFyeVJlbW92ZUZpZWxkcycgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZERpY3Rpb25hcnlSZW1vdmVGaWVsZHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IFVpbnQ4QXJyYXksXG4gICAgZmllbGRzOiBVaW50OEFycmF5W11cbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlSZW1vdmVGaWVsZHMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fRGljdGlvbmFyeURlbGV0ZVJlcXVlc3Qoe1xuICAgICAgZGljdGlvbmFyeV9uYW1lOiBkaWN0aW9uYXJ5TmFtZSxcbiAgICAgIHNvbWU6IG5ldyBncnBjQ2FjaGUuX0RpY3Rpb25hcnlEZWxldGVSZXF1ZXN0LlNvbWUoKSxcbiAgICB9KTtcbiAgICBmaWVsZHMuZm9yRWFjaChmaWVsZCA9PiByZXF1ZXN0LnNvbWUuZmllbGRzLnB1c2goZmllbGQpKTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuRGljdGlvbmFyeURlbGV0ZShcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkcy5TdWNjZXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT5cbiAgICAgICAgICAgICAgICBuZXcgQ2FjaGVEaWN0aW9uYXJ5UmVtb3ZlRmllbGRzLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGljdGlvbmFyeUxlbmd0aChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogc3RyaW5nXG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5TGVuZ3RoLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZURpY3Rpb25hcnlOYW1lKGRpY3Rpb25hcnlOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlRGljdGlvbmFyeUxlbmd0aC5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdkaWN0aW9uYXJ5TGVuZ3RoJyByZXF1ZXN0OyBkaWN0aW9uYXJ5TmFtZTogJHtkaWN0aW9uYXJ5TmFtZX1gXG4gICAgKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmREaWN0aW9uYXJ5TGVuZ3RoKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGRpY3Rpb25hcnlOYW1lKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2RpY3Rpb25hcnlMZW5ndGgnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREaWN0aW9uYXJ5TGVuZ3RoKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5TGVuZ3RoLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0RpY3Rpb25hcnlMZW5ndGhSZXF1ZXN0KHtcbiAgICAgIGRpY3Rpb25hcnlfbmFtZTogZGljdGlvbmFyeU5hbWUsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkRpY3Rpb25hcnlMZW5ndGgoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwPy5taXNzaW5nKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlMZW5ndGguTWlzcygpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/LmZvdW5kKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlMZW5ndGguSGl0KHJlc3AuZm91bmQubGVuZ3RoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgQ2FjaGVEaWN0aW9uYXJ5TGVuZ3RoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5jcmVtZW50KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGZpZWxkOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIGFtb3VudCA9IDEsXG4gICAgdHRsPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVJbmNyZW1lbnQuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIGlmICh0dGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWxpZGF0ZVR0bFNlY29uZHModHRsKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlSW5jcmVtZW50LkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2luY3JlbWVudCcgcmVxdWVzdDsgZmllbGQ6ICR7ZmllbGQudG9TdHJpbmcoKX0sIGFtb3VudCA6ICR7YW1vdW50fSwgdHRsOiAke1xuICAgICAgICB0dGw/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgICB9YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRJbmNyZW1lbnQoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoZmllbGQpLFxuICAgICAgYW1vdW50LFxuICAgICAgdHRsIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShgJ2luY3JlbWVudCcgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZEluY3JlbWVudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBmaWVsZDogVWludDhBcnJheSxcbiAgICBhbW91bnQgPSAxLFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVJbmNyZW1lbnQuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fSW5jcmVtZW50UmVxdWVzdCh7XG4gICAgICBjYWNoZV9rZXk6IGZpZWxkLFxuICAgICAgYW1vdW50LFxuICAgICAgdHRsX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5JbmNyZW1lbnQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBpZiAocmVzcC52YWx1ZSkge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUluY3JlbWVudC5TdWNjZXNzKHJlc3AudmFsdWUpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlSW5jcmVtZW50LlN1Y2Nlc3MoMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IENhY2hlSW5jcmVtZW50LkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGljdGlvbmFyeUluY3JlbWVudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogc3RyaW5nLFxuICAgIGZpZWxkOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIGFtb3VudCA9IDEsXG4gICAgdHRsOiBDb2xsZWN0aW9uVHRsID0gQ29sbGVjdGlvblR0bC5mcm9tQ2FjaGVUdGwoKVxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeUluY3JlbWVudC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVEaWN0aW9uYXJ5TmFtZShkaWN0aW9uYXJ5TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZURpY3Rpb25hcnlJbmNyZW1lbnQuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnZGljdGlvbmFyeUluY3JlbWVudCcgcmVxdWVzdDsgZmllbGQ6ICR7ZmllbGQudG9TdHJpbmcoKX0sIGFtb3VudCA6ICR7YW1vdW50fSwgdHRsOiAke1xuICAgICAgICB0dGwudHRsU2Vjb25kcy50b1N0cmluZygpID8/ICdudWxsJ1xuICAgICAgfWBcbiAgICApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kRGljdGlvbmFyeUluY3JlbWVudChcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChkaWN0aW9uYXJ5TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnQoZmllbGQpLFxuICAgICAgYW1vdW50LFxuICAgICAgdHRsLnR0bE1pbGxpc2Vjb25kcygpIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwLFxuICAgICAgdHRsLnJlZnJlc2hUdGwoKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2RpY3Rpb25hcnlJbmNyZW1lbnQnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREaWN0aW9uYXJ5SW5jcmVtZW50KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBVaW50OEFycmF5LFxuICAgIGZpZWxkOiBVaW50OEFycmF5LFxuICAgIGFtb3VudDogbnVtYmVyLFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyLFxuICAgIHJlZnJlc2hUdGw6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlJbmNyZW1lbnQuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fRGljdGlvbmFyeUluY3JlbWVudFJlcXVlc3Qoe1xuICAgICAgZGljdGlvbmFyeV9uYW1lOiBkaWN0aW9uYXJ5TmFtZSxcbiAgICAgIGZpZWxkLFxuICAgICAgYW1vdW50LFxuICAgICAgdHRsX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgICAgcmVmcmVzaF90dGw6IHJlZnJlc2hUdGwsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5EaWN0aW9uYXJ5SW5jcmVtZW50KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgaWYgKHJlc3AudmFsdWUpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEaWN0aW9uYXJ5SW5jcmVtZW50LlN1Y2Nlc3MocmVzcC52YWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEaWN0aW9uYXJ5SW5jcmVtZW50LlN1Y2Nlc3MoMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT5cbiAgICAgICAgICAgICAgICBuZXcgQ2FjaGVEaWN0aW9uYXJ5SW5jcmVtZW50LkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc29ydGVkU2V0UHV0RWxlbWVudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgc2NvcmU6IG51bWJlcixcbiAgICB0dGw6IENvbGxlY3Rpb25UdGwgPSBDb2xsZWN0aW9uVHRsLmZyb21DYWNoZVR0bCgpXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRQdXRFbGVtZW50LlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldE5hbWUoc29ydGVkU2V0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZVNvcnRlZFNldFB1dEVsZW1lbnQuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIklzc3VpbmcgJ3NvcnRlZFNldFB1dEVsZW1lbnQnIHJlcXVlc3Q7IHZhbHVlOiAlcywgc2NvcmUgOiAlcywgdHRsOiAlc1wiLFxuICAgICAgdHJ1bmNhdGVTdHJpbmcodmFsdWUudG9TdHJpbmcoKSksXG4gICAgICBzY29yZSxcbiAgICAgIHR0bC50dGxTZWNvbmRzLnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZFNvcnRlZFNldFB1dEVsZW1lbnQoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoc29ydGVkU2V0TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnQodmFsdWUpLFxuICAgICAgc2NvcmUsXG4gICAgICB0dGwudHRsTWlsbGlzZWNvbmRzKCkgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyAqIDEwMDAsXG4gICAgICB0dGwucmVmcmVzaFR0bCgpXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ3NvcnRlZFNldFB1dEVsZW1lbnQnIHJlcXVlc3QgcmVzdWx0OiAlc1wiLFxuICAgICAgcmVzdWx0LnRvU3RyaW5nKClcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRTb3J0ZWRTZXRQdXRFbGVtZW50KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWU6IFVpbnQ4QXJyYXksXG4gICAgc2NvcmU6IG51bWJlcixcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlcixcbiAgICByZWZyZXNoVHRsOiBib29sZWFuXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRQdXRFbGVtZW50LlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldFB1dFJlcXVlc3Qoe1xuICAgICAgc2V0X25hbWU6IHNvcnRlZFNldE5hbWUsXG4gICAgICBlbGVtZW50czogW25ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEVsZW1lbnQoe3ZhbHVlLCBzY29yZX0pXSxcbiAgICAgIHR0bF9taWxsaXNlY29uZHM6IHR0bE1pbGxpc2Vjb25kcyxcbiAgICAgIHJlZnJlc2hfdHRsOiByZWZyZXNoVHRsLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU29ydGVkU2V0UHV0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRQdXRFbGVtZW50LlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PlxuICAgICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldFB1dEVsZW1lbnQuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzb3J0ZWRTZXRQdXRFbGVtZW50cyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmcsXG4gICAgZWxlbWVudHM6XG4gICAgICB8IE1hcDxzdHJpbmcgfCBVaW50OEFycmF5LCBudW1iZXI+XG4gICAgICB8IFJlY29yZDxzdHJpbmcsIG51bWJlcj5cbiAgICAgIHwgQXJyYXk8W3N0cmluZywgbnVtYmVyXT4sXG4gICAgdHRsOiBDb2xsZWN0aW9uVHRsID0gQ29sbGVjdGlvblR0bC5mcm9tQ2FjaGVUdGwoKVxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0UHV0RWxlbWVudHMuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlU29ydGVkU2V0TmFtZShzb3J0ZWRTZXROYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlU29ydGVkU2V0UHV0RWxlbWVudHMuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIklzc3VpbmcgJ3NvcnRlZFNldFB1dEVsZW1lbnRzJyByZXF1ZXN0OyBlbGVtZW50cyA6ICVzLCB0dGw6ICVzXCIsXG4gICAgICBlbGVtZW50cy50b1N0cmluZygpLFxuICAgICAgdHRsLnR0bFNlY29uZHMudG9TdHJpbmcoKSA/PyAnbnVsbCdcbiAgICApO1xuXG4gICAgY29uc3Qgc29ydGVkU2V0VmFsdWVTY29yZVBhaXJzID0gdGhpcy5jb252ZXJ0U29ydGVkU2V0TWFwT3JSZWNvcmQoZWxlbWVudHMpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kU29ydGVkU2V0UHV0RWxlbWVudHMoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoc29ydGVkU2V0TmFtZSksXG4gICAgICBzb3J0ZWRTZXRWYWx1ZVNjb3JlUGFpcnMsXG4gICAgICB0dGwudHRsTWlsbGlzZWNvbmRzKCkgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyAqIDEwMDAsXG4gICAgICB0dGwucmVmcmVzaFR0bCgpXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ3NvcnRlZFNldFB1dEVsZW1lbnRzJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHJlc3VsdC50b1N0cmluZygpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU29ydGVkU2V0UHV0RWxlbWVudHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogVWludDhBcnJheSxcbiAgICBlbGVtZW50czogZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRFbGVtZW50W10sXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgcmVmcmVzaFR0bDogYm9vbGVhblxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0UHV0RWxlbWVudHMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0UHV0UmVxdWVzdCh7XG4gICAgICBzZXRfbmFtZTogc29ydGVkU2V0TmFtZSxcbiAgICAgIGVsZW1lbnRzOiBlbGVtZW50cyxcbiAgICAgIHR0bF9taWxsaXNlY29uZHM6IHR0bE1pbGxpc2Vjb25kcyxcbiAgICAgIHJlZnJlc2hfdHRsOiByZWZyZXNoVHRsLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU29ydGVkU2V0UHV0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRQdXRFbGVtZW50cy5TdWNjZXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT5cbiAgICAgICAgICAgICAgICBuZXcgQ2FjaGVTb3J0ZWRTZXRQdXRFbGVtZW50cy5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldEZldGNoQnlSYW5rKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICBvcmRlcjogU29ydGVkU2V0T3JkZXIsXG4gICAgc3RhcnRSYW5rOiBudW1iZXIsXG4gICAgZW5kUmFuaz86IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0RmV0Y2guUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlU29ydGVkU2V0TmFtZShzb3J0ZWRTZXROYW1lKTtcbiAgICAgIHZhbGlkYXRlU29ydGVkU2V0UmFua3Moc3RhcnRSYW5rLCBlbmRSYW5rKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlU29ydGVkU2V0RmV0Y2guRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiSXNzdWluZyAnc29ydGVkU2V0RmV0Y2hCeVJhbmsnIHJlcXVlc3Q7IHN0YXJ0UmFuazogJXMsIGVuZFJhbmsgOiAlcywgb3JkZXI6ICVzXCIsXG4gICAgICBzdGFydFJhbmsudG9TdHJpbmcoKSA/PyAnbnVsbCcsXG4gICAgICBlbmRSYW5rPy50b1N0cmluZygpID8/ICdudWxsJyxcbiAgICAgIG9yZGVyLnRvU3RyaW5nKClcbiAgICApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kU29ydGVkU2V0RmV0Y2hCeVJhbmsoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoc29ydGVkU2V0TmFtZSksXG4gICAgICBvcmRlcixcbiAgICAgIHN0YXJ0UmFuayxcbiAgICAgIGVuZFJhbmtcbiAgICApO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCInc29ydGVkU2V0RmV0Y2hCeVJhbmsnIHJlcXVlc3QgcmVzdWx0OiAlc1wiLFxuICAgICAgcmVzdWx0LnRvU3RyaW5nKClcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRTb3J0ZWRTZXRGZXRjaEJ5UmFuayhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBVaW50OEFycmF5LFxuICAgIG9yZGVyOiBTb3J0ZWRTZXRPcmRlcixcbiAgICBzdGFydFJhbms6IG51bWJlcixcbiAgICBlbmRSYW5rPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRGZXRjaC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IGJ5X2luZGV4ID0gbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0RmV0Y2hSZXF1ZXN0Ll9CeUluZGV4KCk7XG4gICAgaWYgKHN0YXJ0UmFuaykge1xuICAgICAgYnlfaW5kZXguaW5jbHVzaXZlX3N0YXJ0X2luZGV4ID0gc3RhcnRSYW5rO1xuICAgIH0gZWxzZSB7XG4gICAgICBieV9pbmRleC51bmJvdW5kZWRfc3RhcnQgPSBuZXcgZ3JwY0NhY2hlLl9VbmJvdW5kZWQoKTtcbiAgICB9XG4gICAgaWYgKGVuZFJhbmspIHtcbiAgICAgIGJ5X2luZGV4LmV4Y2x1c2l2ZV9lbmRfaW5kZXggPSBlbmRSYW5rO1xuICAgIH0gZWxzZSB7XG4gICAgICBieV9pbmRleC51bmJvdW5kZWRfZW5kID0gbmV3IGdycGNDYWNoZS5fVW5ib3VuZGVkKCk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9CdWZPcmRlciA9XG4gICAgICBvcmRlciA9PT0gU29ydGVkU2V0T3JkZXIuRGVzY2VuZGluZ1xuICAgICAgICA/IGdycGNDYWNoZS5fU29ydGVkU2V0RmV0Y2hSZXF1ZXN0Lk9yZGVyLkRFU0NFTkRJTkdcbiAgICAgICAgOiBncnBjQ2FjaGUuX1NvcnRlZFNldEZldGNoUmVxdWVzdC5PcmRlci5BU0NFTkRJTkc7XG5cbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0RmV0Y2hSZXF1ZXN0KHtcbiAgICAgIHNldF9uYW1lOiBzb3J0ZWRTZXROYW1lLFxuICAgICAgb3JkZXI6IHByb3RvQnVmT3JkZXIsXG4gICAgICB3aXRoX3Njb3JlczogdHJ1ZSxcbiAgICAgIGJ5X2luZGV4OiBieV9pbmRleCxcbiAgICB9KTtcblxuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU29ydGVkU2V0RmV0Y2goXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3A/LmZvdW5kPy52YWx1ZXNfd2l0aF9zY29yZXMpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgbmV3IENhY2hlU29ydGVkU2V0RmV0Y2guSGl0KFxuICAgICAgICAgICAgICAgICAgICByZXNwLmZvdW5kLnZhbHVlc193aXRoX3Njb3Jlcy5lbGVtZW50c1xuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldEZldGNoLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICBuZXcgVW5rbm93bkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICdVbmtub3duIHNvcnRlZCBzZXQgZmV0Y2ggaGl0IHJlc3BvbnNlIHR5cGUnXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5NaXNzKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICBuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5FcnJvcihcbiAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoJ1Vua25vd24gc29ydGVkIHNldCBmZXRjaCByZXNwb25zZSB0eXBlJylcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldEZldGNoQnlTY29yZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmcsXG4gICAgb3JkZXI6IFNvcnRlZFNldE9yZGVyLFxuICAgIG1pblNjb3JlPzogbnVtYmVyLFxuICAgIG1heFNjb3JlPzogbnVtYmVyLFxuICAgIG9mZnNldD86IG51bWJlcixcbiAgICBjb3VudD86IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0RmV0Y2guUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlU29ydGVkU2V0TmFtZShzb3J0ZWRTZXROYW1lKTtcbiAgICAgIHZhbGlkYXRlU29ydGVkU2V0U2NvcmVzKG1pblNjb3JlLCBtYXhTY29yZSk7XG4gICAgICBpZiAob2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFsaWRhdGVTb3J0ZWRTZXRPZmZzZXQob2Zmc2V0KTtcbiAgICAgIH1cbiAgICAgIGlmIChjb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbGlkYXRlU29ydGVkU2V0Q291bnQoY291bnQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCJJc3N1aW5nICdzb3J0ZWRTZXRGZXRjaEJ5U2NvcmUnIHJlcXVlc3Q7IG1pblNjb3JlOiAlcywgbWF4U2NvcmUgOiAlcywgb3JkZXI6ICVzLCBvZmZzZXQ6ICVzLCBjb3VudDogJXNcIixcbiAgICAgIG1pblNjb3JlPy50b1N0cmluZygpID8/ICdudWxsJyxcbiAgICAgIG1heFNjb3JlPy50b1N0cmluZygpID8/ICdudWxsJyxcbiAgICAgIG9yZGVyLnRvU3RyaW5nKCksXG4gICAgICBvZmZzZXQ/LnRvU3RyaW5nKCkgPz8gJ251bGwnLFxuICAgICAgY291bnQ/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZFNvcnRlZFNldEZldGNoQnlTY29yZShcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChzb3J0ZWRTZXROYW1lKSxcbiAgICAgIG9yZGVyLFxuICAgICAgbWluU2NvcmUsXG4gICAgICBtYXhTY29yZSxcbiAgICAgIG9mZnNldCxcbiAgICAgIGNvdW50XG4gICAgKTtcblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCInc29ydGVkU2V0RmV0Y2hCeVNjb3JlJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHJlc3VsdC50b1N0cmluZygpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU29ydGVkU2V0RmV0Y2hCeVNjb3JlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgb3JkZXI6IFNvcnRlZFNldE9yZGVyLFxuICAgIG1pblNjb3JlPzogbnVtYmVyLFxuICAgIG1heFNjb3JlPzogbnVtYmVyLFxuICAgIG9mZnNldD86IG51bWJlcixcbiAgICBjb3VudD86IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0RmV0Y2guUmVzcG9uc2U+IHtcbiAgICBjb25zdCBieV9zY29yZSA9IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEZldGNoUmVxdWVzdC5fQnlTY29yZSgpO1xuICAgIGlmIChtaW5TY29yZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBieV9zY29yZS5taW5fc2NvcmUgPSBuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRGZXRjaFJlcXVlc3QuX0J5U2NvcmUuX1Njb3JlKFxuICAgICAgICB7XG4gICAgICAgICAgc2NvcmU6IG1pblNjb3JlLFxuICAgICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ5X3Njb3JlLnVuYm91bmRlZF9taW4gPSBuZXcgZ3JwY0NhY2hlLl9VbmJvdW5kZWQoKTtcbiAgICB9XG4gICAgaWYgKG1heFNjb3JlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJ5X3Njb3JlLm1heF9zY29yZSA9IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEZldGNoUmVxdWVzdC5fQnlTY29yZS5fU2NvcmUoXG4gICAgICAgIHtcbiAgICAgICAgICBzY29yZTogbWF4U2NvcmUsXG4gICAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnlfc2NvcmUudW5ib3VuZGVkX21heCA9IG5ldyBncnBjQ2FjaGUuX1VuYm91bmRlZCgpO1xuICAgIH1cbiAgICBieV9zY29yZS5vZmZzZXQgPSBvZmZzZXQgPz8gMDtcbiAgICAvLyBOb3RlOiB0aGUgc2VydmljZSByZXNlcnZlcyBuZWdhdGl2ZSBjb3VudHMgdG8gbWVhbiBhbGwgZWxlbWVudHMgaW4gdGhlXG4gICAgLy8gcmVzdWx0IHNldC5cbiAgICBieV9zY29yZS5jb3VudCA9IGNvdW50ID8/IC0xO1xuXG4gICAgY29uc3QgcHJvdG9CdWZPcmRlciA9XG4gICAgICBvcmRlciA9PT0gU29ydGVkU2V0T3JkZXIuRGVzY2VuZGluZ1xuICAgICAgICA/IGdycGNDYWNoZS5fU29ydGVkU2V0RmV0Y2hSZXF1ZXN0Lk9yZGVyLkRFU0NFTkRJTkdcbiAgICAgICAgOiBncnBjQ2FjaGUuX1NvcnRlZFNldEZldGNoUmVxdWVzdC5PcmRlci5BU0NFTkRJTkc7XG5cbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0RmV0Y2hSZXF1ZXN0KHtcbiAgICAgIHNldF9uYW1lOiBzb3J0ZWRTZXROYW1lLFxuICAgICAgb3JkZXI6IHByb3RvQnVmT3JkZXIsXG4gICAgICB3aXRoX3Njb3JlczogdHJ1ZSxcbiAgICAgIGJ5X3Njb3JlOiBieV9zY29yZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU29ydGVkU2V0RmV0Y2goXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3A/LmZvdW5kPy52YWx1ZXNfd2l0aF9zY29yZXMpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgbmV3IENhY2hlU29ydGVkU2V0RmV0Y2guSGl0KFxuICAgICAgICAgICAgICAgICAgICByZXNwLmZvdW5kLnZhbHVlc193aXRoX3Njb3Jlcy5lbGVtZW50c1xuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldEZldGNoLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICBuZXcgVW5rbm93bkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICdVbmtub3duIHNvcnRlZCBzZXQgZmV0Y2ggaGl0IHJlc3BvbnNlIHR5cGUnXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5NaXNzKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICBuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5FcnJvcihcbiAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoJ1Vua25vd24gc29ydGVkIHNldCBmZXRjaCByZXNwb25zZSB0eXBlJylcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldEdldFJhbmsoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRHZXRSYW5rLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldE5hbWUoc29ydGVkU2V0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZVNvcnRlZFNldEdldFJhbmsuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiSXNzdWluZyAnc29ydGVkU2V0R2V0UmFuaycgcmVxdWVzdDsgdmFsdWU6ICVzXCIsXG4gICAgICB0cnVuY2F0ZVN0cmluZyh2YWx1ZS50b1N0cmluZygpKVxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRTb3J0ZWRTZXRHZXRSYW5rKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KHNvcnRlZFNldE5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0KHZhbHVlKVxuICAgICk7XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ3NvcnRlZFNldEdldFJhbmsnIHJlcXVlc3QgcmVzdWx0OiAlc1wiLFxuICAgICAgdHJ1bmNhdGVTdHJpbmcocmVzdWx0LnRvU3RyaW5nKCkpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU29ydGVkU2V0R2V0UmFuayhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRHZXRSYW5rLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEdldFJhbmtSZXF1ZXN0KHtcbiAgICAgIHNldF9uYW1lOiBzb3J0ZWRTZXROYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXJcbiAgICAgICAgLmdldENsaWVudCgpXG4gICAgICAgIC5Tb3J0ZWRTZXRHZXRSYW5rKFxuICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgICAge2ludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnN9LFxuICAgICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgcmVzcD8ubWlzc2luZyB8fFxuICAgICAgICAgICAgICByZXNwPy5lbGVtZW50X3Jhbms/LnJlc3VsdCA9PT0gRUNhY2hlUmVzdWx0Lk1pc3NcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldEdldFJhbmsuTWlzcygpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uZWxlbWVudF9yYW5rPy5yZXN1bHQgPT09IEVDYWNoZVJlc3VsdC5IaXQpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3A/LmVsZW1lbnRfcmFuay5yYW5rID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldEdldFJhbmsuTWlzcygpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldEdldFJhbmsuSGl0KHJlc3AuZWxlbWVudF9yYW5rLnJhbmspKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgQ2FjaGVTb3J0ZWRTZXRHZXRSYW5rLkVycm9yKGUpLFxuICAgICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc29ydGVkU2V0R2V0U2NvcmUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRHZXRTY29yZS5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlcyA9IGF3YWl0IHRoaXMuc29ydGVkU2V0R2V0U2NvcmVzKGNhY2hlTmFtZSwgc29ydGVkU2V0TmFtZSwgW1xuICAgICAgdmFsdWUsXG4gICAgXSBhcyBzdHJpbmdbXSB8IFVpbnQ4QXJyYXlbXSk7XG4gICAgaWYgKHJlc3BvbnNlcyBpbnN0YW5jZW9mIENhY2hlU29ydGVkU2V0R2V0U2NvcmVzLkhpdCkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlcy5yZXNwb25zZXMoKVswXTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlcyBpbnN0YW5jZW9mIENhY2hlU29ydGVkU2V0R2V0U2NvcmVzLk1pc3MpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZS5NaXNzKHRoaXMuY29udmVydCh2YWx1ZSkpO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2VzIGluc3RhbmNlb2YgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZXMuRXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgcmVzcG9uc2VzLmlubmVyRXhjZXB0aW9uKCksXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZS5FcnJvcihlcnIsIHRoaXMuY29udmVydCh2YWx1ZSkpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgIG5ldyBVbmtub3duRXJyb3IoJ1Vua25vd24gcmVzcG9uc2UgdHlwZScpLFxuICAgICAgZXJyID0+IG5ldyBDYWNoZVNvcnRlZFNldEdldFNjb3JlLkVycm9yKGVyciwgdGhpcy5jb252ZXJ0KHZhbHVlKSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldEdldFNjb3JlcyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmcsXG4gICAgdmFsdWVzOiBzdHJpbmdbXSB8IFVpbnQ4QXJyYXlbXVxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0R2V0U2NvcmVzLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldE5hbWUoc29ydGVkU2V0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZVNvcnRlZFNldEdldFNjb3Jlcy5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCJJc3N1aW5nICdzb3J0ZWRTZXRHZXRTY29yZXMnIHJlcXVlc3Q7IHZhbHVlczogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHZhbHVlcy50b1N0cmluZygpKVxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRTb3J0ZWRTZXRHZXRTY29yZXMoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoc29ydGVkU2V0TmFtZSksXG4gICAgICB2YWx1ZXMubWFwKHZhbHVlID0+IHRoaXMuY29udmVydCh2YWx1ZSkpXG4gICAgKTtcblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCInc29ydGVkU2V0R2V0U2NvcmVzJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHJlc3VsdC50b1N0cmluZygpKVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNvcnRlZFNldEdldFNjb3JlcyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBVaW50OEFycmF5LFxuICAgIHZhbHVlczogVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRHZXRTY29yZXMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0R2V0U2NvcmVSZXF1ZXN0KHtcbiAgICAgIHNldF9uYW1lOiBzb3J0ZWRTZXROYW1lLFxuICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlclxuICAgICAgICAuZ2V0Q2xpZW50KClcbiAgICAgICAgLlNvcnRlZFNldEdldFNjb3JlKFxuICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgICAge2ludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnN9LFxuICAgICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwPy5taXNzaW5nKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU29ydGVkU2V0R2V0U2NvcmVzLk1pc3MoKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/LmZvdW5kKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gcmVzcC5mb3VuZC5lbGVtZW50cy5tYXAoZWxlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmNvbnZlcnRFQ2FjaGVSZXN1bHQoZWxlLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfU29ydGVkU2V0R2V0U2NvcmVSZXNwb25zZVBhcnQocmVzdWx0LCBlbGUuc2NvcmUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZXMuSGl0KGVsZW1lbnRzLCB2YWx1ZXMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT5cbiAgICAgICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldEdldFNjb3Jlcy5FcnJvcihlKSxcbiAgICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldEluY3JlbWVudFNjb3JlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICBhbW91bnQgPSAxLFxuICAgIHR0bDogQ29sbGVjdGlvblR0bCA9IENvbGxlY3Rpb25UdGwuZnJvbUNhY2hlVHRsKClcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldEluY3JlbWVudFNjb3JlLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldE5hbWUoc29ydGVkU2V0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZVNvcnRlZFNldEluY3JlbWVudFNjb3JlLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIklzc3VpbmcgJ3NvcnRlZFNldEluY3JlbWVudFNjb3JlJyByZXF1ZXN0OyB2YWx1ZTogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHZhbHVlLnRvU3RyaW5nKCkpXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZFNvcnRlZFNldEluY3JlbWVudFNjb3JlKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KHNvcnRlZFNldE5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0KHZhbHVlKSxcbiAgICAgIGFtb3VudCxcbiAgICAgIHR0bC50dGxNaWxsaXNlY29uZHMoKSB8fCB0aGlzLmRlZmF1bHRUdGxTZWNvbmRzICogMTAwMCxcbiAgICAgIHR0bC5yZWZyZXNoVHRsKClcbiAgICApO1xuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIidzb3J0ZWRTZXRJbmNyZW1lbnRTY29yZScgcmVxdWVzdCByZXN1bHQ6ICVzXCIsXG4gICAgICB0cnVuY2F0ZVN0cmluZyhyZXN1bHQudG9TdHJpbmcoKSlcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRTb3J0ZWRTZXRJbmNyZW1lbnRTY29yZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBVaW50OEFycmF5LFxuICAgIGFtb3VudDogbnVtYmVyLFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyLFxuICAgIHJlZnJlc2hUdGw6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldEluY3JlbWVudFNjb3JlLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEluY3JlbWVudFJlcXVlc3Qoe1xuICAgICAgc2V0X25hbWU6IHNvcnRlZFNldE5hbWUsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBhbW91bnQ6IGFtb3VudCxcbiAgICAgIHR0bF9taWxsaXNlY29uZHM6IHR0bE1pbGxpc2Vjb25kcyxcbiAgICAgIHJlZnJlc2hfdHRsOiByZWZyZXNoVHRsLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXJcbiAgICAgICAgLmdldENsaWVudCgpXG4gICAgICAgIC5Tb3J0ZWRTZXRJbmNyZW1lbnQoXG4gICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICB7aW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9yc30sXG4gICAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3Auc2NvcmUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldEluY3JlbWVudFNjb3JlLlN1Y2Nlc3MocmVzcC5zY29yZSkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU29ydGVkU2V0SW5jcmVtZW50U2NvcmUuU3VjY2VzcygwKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT5cbiAgICAgICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldEluY3JlbWVudFNjb3JlLkVycm9yKGUpLFxuICAgICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc29ydGVkU2V0UmVtb3ZlRWxlbWVudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnQuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlU29ydGVkU2V0TmFtZShzb3J0ZWRTZXROYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlU29ydGVkU2V0RmV0Y2guRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcIklzc3VpbmcgJ3NvcnRlZFNldFJlbW92ZUVsZW1lbnQnIHJlcXVlc3RcIik7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRTb3J0ZWRTZXRSZW1vdmVFbGVtZW50KFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KHNvcnRlZFNldE5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0KHZhbHVlKVxuICAgICk7XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ3NvcnRlZFNldFJlbW92ZUVsZW1lbnQnIHJlcXVlc3QgcmVzdWx0OiAlc1wiLFxuICAgICAgdHJ1bmNhdGVTdHJpbmcocmVzdWx0LnRvU3RyaW5nKCkpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU29ydGVkU2V0UmVtb3ZlRWxlbWVudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRSZW1vdmVFbGVtZW50LlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldFJlbW92ZVJlcXVlc3Qoe1xuICAgICAgc2V0X25hbWU6IHNvcnRlZFNldE5hbWUsXG4gICAgICBzb21lOiBuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRSZW1vdmVSZXF1ZXN0Ll9Tb21lKHtcbiAgICAgICAgdmFsdWVzOiBbdmFsdWVdLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLlNvcnRlZFNldFJlbW92ZShcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICBlcnIgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PlxuICAgICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnQuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnQuU3VjY2VzcygpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc29ydGVkU2V0UmVtb3ZlRWxlbWVudHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlczogc3RyaW5nW10gfCBVaW50OEFycmF5W11cbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnRzLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldE5hbWUoc29ydGVkU2V0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZVNvcnRlZFNldEZldGNoLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXCJJc3N1aW5nICdzb3J0ZWRTZXRSZW1vdmVFbGVtZW50cycgcmVxdWVzdFwiKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZFNvcnRlZFNldFJlbW92ZUVsZW1lbnRzKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KHNvcnRlZFNldE5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0QXJyYXkodmFsdWVzKVxuICAgICk7XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ3NvcnRlZFNldFJlbW92ZUVsZW1lbnRzJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHJlc3VsdC50b1N0cmluZygpKVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNvcnRlZFNldFJlbW92ZUVsZW1lbnRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWVzOiBVaW50OEFycmF5W11cbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnRzLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldFJlbW92ZVJlcXVlc3Qoe1xuICAgICAgc2V0X25hbWU6IHNvcnRlZFNldE5hbWUsXG4gICAgICBzb21lOiBuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRSZW1vdmVSZXF1ZXN0Ll9Tb21lKHtcbiAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU29ydGVkU2V0UmVtb3ZlKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+XG4gICAgICAgICAgICAgICAgbmV3IENhY2hlU29ydGVkU2V0UmVtb3ZlRWxlbWVudHMuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnRzLlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldExlbmd0aChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldExlbmd0aC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVTb3J0ZWRTZXROYW1lKHNvcnRlZFNldE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiSXNzdWluZyAnc29ydGVkU2V0TGVuZ3RoJyByZXF1ZXN0XCIpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kU29ydGVkU2V0TGVuZ3RoKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KHNvcnRlZFNldE5hbWUpXG4gICAgKTtcblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCInc29ydGVkU2V0TGVuZ3RoJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHJlc3VsdC50b1N0cmluZygpKVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNvcnRlZFNldExlbmd0aChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRMZW5ndGguUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0TGVuZ3RoUmVxdWVzdCh7XG4gICAgICBzZXRfbmFtZTogc29ydGVkU2V0TmFtZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU29ydGVkU2V0TGVuZ3RoKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcD8ubWlzc2luZykge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRMZW5ndGguTWlzcygpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/LmZvdW5kKSB7XG4gICAgICAgICAgICBpZiAoIXJlc3AuZm91bmQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU29ydGVkU2V0TGVuZ3RoLk1pc3MoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldExlbmd0aC5IaXQocmVzcC5mb3VuZC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZVNvcnRlZFNldExlbmd0aC5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldExlbmd0aEJ5U2NvcmUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIG1pblNjb3JlPzogbnVtYmVyLFxuICAgIG1heFNjb3JlPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRMZW5ndGhCeVNjb3JlLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldE5hbWUoc29ydGVkU2V0TmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldFNjb3JlcyhtaW5TY29yZSwgbWF4U2NvcmUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCJJc3N1aW5nICdzb3J0ZWRTZXRMZW5ndGhCeVNjb3JlJyByZXF1ZXN0OyBtaW5TY29yZTogJXMsIG1heFNjb3JlOiAlc1wiLFxuICAgICAgbWluU2NvcmU/LnRvU3RyaW5nKCkgPz8gJ251bGwnLFxuICAgICAgbWF4U2NvcmU/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZFNvcnRlZFNldExlbmd0aEJ5U2NvcmUoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoc29ydGVkU2V0TmFtZSksXG4gICAgICBtaW5TY29yZSxcbiAgICAgIG1heFNjb3JlXG4gICAgKTtcblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCInc29ydGVkU2V0TGVuZ3RoQnlTY29yZScgcmVxdWVzdCByZXN1bHQ6ICVzXCIsXG4gICAgICB0cnVuY2F0ZVN0cmluZyhyZXN1bHQudG9TdHJpbmcoKSlcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRTb3J0ZWRTZXRMZW5ndGhCeVNjb3JlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgbWluU2NvcmU/OiBudW1iZXIsXG4gICAgbWF4U2NvcmU/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldExlbmd0aEJ5U2NvcmUuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0TGVuZ3RoQnlTY29yZVJlcXVlc3Qoe1xuICAgICAgc2V0X25hbWU6IHNvcnRlZFNldE5hbWUsXG4gICAgfSk7XG5cbiAgICBpZiAobWluU2NvcmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdC51bmJvdW5kZWRfbWluID0gbmV3IGdycGNDYWNoZS5fVW5ib3VuZGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QuaW5jbHVzaXZlX21pbiA9IG1pblNjb3JlO1xuICAgIH1cblxuICAgIGlmIChtYXhTY29yZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0LnVuYm91bmRlZF9tYXggPSBuZXcgZ3JwY0NhY2hlLl9VbmJvdW5kZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdC5pbmNsdXNpdmVfbWF4ID0gbWF4U2NvcmU7XG4gICAgfVxuXG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5Tb3J0ZWRTZXRMZW5ndGhCeVNjb3JlKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcD8ubWlzc2luZykge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRMZW5ndGhCeVNjb3JlLk1pc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNwPy5mb3VuZCkge1xuICAgICAgICAgICAgaWYgKCFyZXNwLmZvdW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldExlbmd0aEJ5U2NvcmUuTWlzcygpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU29ydGVkU2V0TGVuZ3RoQnlTY29yZS5IaXQocmVzcC5mb3VuZC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+XG4gICAgICAgICAgICAgICAgbmV3IENhY2hlU29ydGVkU2V0TGVuZ3RoQnlTY29yZS5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplSW50ZXJjZXB0b3JzKFxuICAgIGxvZ2dlckZhY3Rvcnk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5LFxuICAgIG1pZGRsZXdhcmVzOiBNaWRkbGV3YXJlW10sXG4gICAgbWlkZGxld2FyZVJlcXVlc3RDb250ZXh0OiBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJDb250ZXh0XG4gICk6IEludGVyY2VwdG9yW10ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBbXG4gICAgICBuZXcgSGVhZGVyKCdBdXRob3JpemF0aW9uJywgdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIuZ2V0QXV0aFRva2VuKCkpLFxuICAgICAgbmV3IEhlYWRlcignQWdlbnQnLCBgbm9kZWpzOiR7dmVyc2lvbn1gKSxcbiAgICBdO1xuICAgIHJldHVybiBbXG4gICAgICBtaWRkbGV3YXJlc0ludGVyY2VwdG9yKFxuICAgICAgICBsb2dnZXJGYWN0b3J5LFxuICAgICAgICBtaWRkbGV3YXJlcyxcbiAgICAgICAgbWlkZGxld2FyZVJlcXVlc3RDb250ZXh0LFxuICAgICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KClcbiAgICAgICksXG4gICAgICBuZXcgSGVhZGVySW50ZXJjZXB0b3JQcm92aWRlcihoZWFkZXJzKS5jcmVhdGVIZWFkZXJzSW50ZXJjZXB0b3IoKSxcbiAgICAgIENsaWVudFRpbWVvdXRJbnRlcmNlcHRvcih0aGlzLnJlcXVlc3RUaW1lb3V0TXMpLFxuICAgICAgLi4uY3JlYXRlUmV0cnlJbnRlcmNlcHRvcklmRW5hYmxlZChcbiAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmdldExvZ2dlckZhY3RvcnkoKSxcbiAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmdldFJldHJ5U3RyYXRlZ3koKVxuICAgICAgKSxcbiAgICBdO1xuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0KHY6IHN0cmluZyB8IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHtcbiAgICBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0RW5jb2Rlci5lbmNvZGUodik7XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0QXJyYXkodjogc3RyaW5nW10gfCBVaW50OEFycmF5W10pOiBVaW50OEFycmF5W10ge1xuICAgIHJldHVybiB2Lm1hcChpID0+IHRoaXMuY29udmVydChpKSk7XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRFbGVtZW50cyhcbiAgICBlbGVtZW50czpcbiAgICAgIHwgTWFwPHN0cmluZyB8IFVpbnQ4QXJyYXksIHN0cmluZyB8IFVpbnQ4QXJyYXk+XG4gICAgICB8IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IFVpbnQ4QXJyYXk+XG4gICAgICB8IEFycmF5PFtzdHJpbmcsIHN0cmluZyB8IFVpbnQ4QXJyYXldPlxuICApOiBncnBjQ2FjaGUuX0RpY3Rpb25hcnlGaWVsZFZhbHVlUGFpcltdIHtcbiAgICBpZiAoZWxlbWVudHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udmVydEVsZW1lbnRzKG5ldyBNYXAoZWxlbWVudHMpKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnRzIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICByZXR1cm4gWy4uLmVsZW1lbnRzLmVudHJpZXMoKV0ubWFwKFxuICAgICAgICBlbGVtZW50ID0+XG4gICAgICAgICAgbmV3IGdycGNDYWNoZS5fRGljdGlvbmFyeUZpZWxkVmFsdWVQYWlyKHtcbiAgICAgICAgICAgIGZpZWxkOiB0aGlzLmNvbnZlcnQoZWxlbWVudFswXSksXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5jb252ZXJ0KGVsZW1lbnRbMV0pLFxuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZWxlbWVudHMpLm1hcChcbiAgICAgICAgZWxlbWVudCA9PlxuICAgICAgICAgIG5ldyBncnBjQ2FjaGUuX0RpY3Rpb25hcnlGaWVsZFZhbHVlUGFpcih7XG4gICAgICAgICAgICBmaWVsZDogdGhpcy5jb252ZXJ0KGVsZW1lbnRbMF0pLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuY29udmVydChlbGVtZW50WzFdKSxcbiAgICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRTb3J0ZWRTZXRNYXBPclJlY29yZChcbiAgICBlbGVtZW50czpcbiAgICAgIHwgTWFwPHN0cmluZyB8IFVpbnQ4QXJyYXksIG51bWJlcj5cbiAgICAgIHwgUmVjb3JkPHN0cmluZywgbnVtYmVyPlxuICAgICAgfCBBcnJheTxbc3RyaW5nLCBudW1iZXJdPlxuICApOiBncnBjQ2FjaGUuX1NvcnRlZFNldEVsZW1lbnRbXSB7XG4gICAgaWYgKGVsZW1lbnRzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRTb3J0ZWRTZXRNYXBPclJlY29yZChuZXcgTWFwKGVsZW1lbnRzKSk7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50cyBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgcmV0dXJuIFsuLi5lbGVtZW50cy5lbnRyaWVzKCldLm1hcChcbiAgICAgICAgZWxlbWVudCA9PlxuICAgICAgICAgIG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEVsZW1lbnQoe1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMuY29udmVydChlbGVtZW50WzBdKSxcbiAgICAgICAgICAgIHNjb3JlOiBlbGVtZW50WzFdLFxuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZWxlbWVudHMpLm1hcChcbiAgICAgICAgZWxlbWVudCA9PlxuICAgICAgICAgIG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEVsZW1lbnQoe1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMuY29udmVydChlbGVtZW50WzBdKSxcbiAgICAgICAgICAgIHNjb3JlOiBlbGVtZW50WzFdLFxuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpdGVtR2V0VHlwZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUl0ZW1HZXRUeXBlLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBDYWNoZUl0ZW1HZXRUeXBlLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmRJdGVtR2V0VHlwZShjYWNoZU5hbWUsIHRoaXMuY29udmVydChrZXkpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZEl0ZW1HZXRUeXBlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlSXRlbUdldFR5cGUuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fSXRlbUdldFR5cGVSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX2tleToga2V5LFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuSXRlbUdldFR5cGUoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwPy5taXNzaW5nKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUl0ZW1HZXRUeXBlLk1pc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNwPy5mb3VuZCkge1xuICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgbmV3IENhY2hlSXRlbUdldFR5cGUuSGl0KFxuICAgICAgICAgICAgICAgIHRoaXMuY29udmVydEl0ZW1UeXBlUmVzdWx0KHJlc3AuZm91bmQuaXRlbV90eXBlKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IENhY2hlSXRlbUdldFR5cGUuRXJyb3IoZSksXG4gICAgICAgICAgICAgIHJlc29sdmVGbjogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgcmVqZWN0Rm46IHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgYXN5bmMgaXRlbUdldFR0bChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUl0ZW1HZXRUdGwuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlSXRlbUdldFR0bC5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kSXRlbUdldFR0bChjYWNoZU5hbWUsIHRoaXMuY29udmVydChrZXkpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZEl0ZW1HZXRUdGwoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVJdGVtR2V0VHRsLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0l0ZW1HZXRUdGxSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX2tleToga2V5LFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuSXRlbUdldFR0bChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlSXRlbUdldFR0bC5NaXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlSXRlbUdldFR0bC5IaXQocmVzcC5mb3VuZC5yZW1haW5pbmdfdHRsX21pbGxpcykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IENhY2hlSXRlbUdldFR0bC5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGtleUV4aXN0cyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUtleUV4aXN0cy5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVLZXlFeGlzdHMuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcIklzc3VpbmcgJ2tleUV4aXN0cycgcmVxdWVzdFwiKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZEtleUV4aXN0cyhjYWNoZU5hbWUsIHRoaXMuY29udmVydChrZXkpKTtcblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCIna2V5RXhpc3RzJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHJlc3VsdC50b1N0cmluZygpKVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZEtleUV4aXN0cyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUtleUV4aXN0cy5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9LZXlzRXhpc3RSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX2tleXM6IFtrZXldLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuS2V5c0V4aXN0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVLZXlFeGlzdHMuU3VjY2VzcyhyZXNwLmV4aXN0cykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IENhY2hlS2V5RXhpc3RzLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlVHRsKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlVXBkYXRlVHRsLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVZhbGlkRm9yU2Vjb25kcyh0dGxNaWxsaXNlY29uZHMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgQ2FjaGVVcGRhdGVUdGwuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiSXNzdWluZyAndXBkYXRlVHRsJyByZXF1ZXN0OyB0dGxNaWxsaXNlY29uZHM6ICVzXCIsXG4gICAgICB0dGxNaWxsaXNlY29uZHM/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZFVwZGF0ZVR0bChcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChrZXkpLFxuICAgICAgdHRsTWlsbGlzZWNvbmRzXG4gICAgKTtcblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCIndXBkYXRlVHRsJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHJlc3VsdC50b1N0cmluZygpKVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFVwZGF0ZVR0bChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IFVpbnQ4QXJyYXksXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVVwZGF0ZVR0bC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9VcGRhdGVUdGxSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX2tleToga2V5LFxuICAgICAgb3ZlcndyaXRlX3RvX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuVXBkYXRlVHRsKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcD8ubWlzc2luZykge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVVcGRhdGVUdGwuTWlzcygpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/LnNldCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVVcGRhdGVUdGwuU2V0KCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IENhY2hlVXBkYXRlVHRsLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMga2V5c0V4aXN0KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleXM6IHN0cmluZ1tdIHwgVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVLZXlzRXhpc3QuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlS2V5c0V4aXN0LkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXCJJc3N1aW5nICdrZXlzRXhpc3QnIHJlcXVlc3RcIik7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRLZXlzRXhpc3QoY2FjaGVOYW1lLCB0aGlzLmNvbnZlcnRBcnJheShrZXlzKSk7XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ2tleXNFeGlzdCcgcmVxdWVzdCByZXN1bHQ6ICVzXCIsXG4gICAgICB0cnVuY2F0ZVN0cmluZyhyZXN1bHQudG9TdHJpbmcoKSlcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRLZXlzRXhpc3QoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5czogVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVLZXlzRXhpc3QuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fS2V5c0V4aXN0UmVxdWVzdCh7XG4gICAgICBjYWNoZV9rZXlzOiBrZXlzLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuS2V5c0V4aXN0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVLZXlzRXhpc3QuU3VjY2VzcyhyZXNwLmV4aXN0cykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IENhY2hlS2V5c0V4aXN0LkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5jcmVhc2VUdGwoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVJbmNyZWFzZVR0bC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVWYWxpZEZvclNlY29uZHModHRsTWlsbGlzZWNvbmRzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlSW5jcmVhc2VUdGwuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiSXNzdWluZyAnaW5jcmVhc2VUdGwnIHJlcXVlc3Q7IHR0bE1pbGxpc2Vjb25kczogJXNcIixcbiAgICAgIHR0bE1pbGxpc2Vjb25kcz8udG9TdHJpbmcoKSA/PyAnbnVsbCdcbiAgICApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kSW5jcmVhc2VUdGwoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoa2V5KSxcbiAgICAgIHR0bE1pbGxpc2Vjb25kc1xuICAgICk7XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ2luY3JlYXNlVHRsJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHJlc3VsdC50b1N0cmluZygpKVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZEluY3JlYXNlVHRsKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogVWludDhBcnJheSxcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlSW5jcmVhc2VUdGwuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fVXBkYXRlVHRsUmVxdWVzdCh7XG4gICAgICBjYWNoZV9rZXk6IGtleSxcbiAgICAgIGluY3JlYXNlX3RvX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuVXBkYXRlVHRsKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcD8ubWlzc2luZykge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVJbmNyZWFzZVR0bC5NaXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uc2V0KSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUluY3JlYXNlVHRsLlNldCgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZUluY3JlYXNlVHRsLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVjcmVhc2VUdGwoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVEZWNyZWFzZVR0bC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVWYWxpZEZvclNlY29uZHModHRsTWlsbGlzZWNvbmRzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IENhY2hlRGVjcmVhc2VUdGwuRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiSXNzdWluZyAnZGVjcmVhc2VUdGwnIHJlcXVlc3Q7IHR0bE1pbGxpc2Vjb25kczogJXNcIixcbiAgICAgIHR0bE1pbGxpc2Vjb25kcz8udG9TdHJpbmcoKSA/PyAnbnVsbCdcbiAgICApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kRGVjcmVhc2VUdGwoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoa2V5KSxcbiAgICAgIHR0bE1pbGxpc2Vjb25kc1xuICAgICk7XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ2RlY3JlYXNlVHRsJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHJlc3VsdC50b1N0cmluZygpKVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZERlY3JlYXNlVHRsKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogVWludDhBcnJheSxcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlRGVjcmVhc2VUdGwuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fVXBkYXRlVHRsUmVxdWVzdCh7XG4gICAgICBjYWNoZV9rZXk6IGtleSxcbiAgICAgIGRlY3JlYXNlX3RvX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuVXBkYXRlVHRsKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcD8ubWlzc2luZykge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEZWNyZWFzZVR0bC5NaXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uc2V0KSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURlY3JlYXNlVHRsLlNldCgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+IG5ldyBDYWNoZURlY3JlYXNlVHRsLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZTogc3RyaW5nKTogTWV0YWRhdGEge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gbmV3IE1ldGFkYXRhKCk7XG4gICAgbWV0YWRhdGEuc2V0KCdjYWNoZScsIGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9XG5cbiAgcHJpdmF0ZSB0b1NpbmdsZXRvbkZpZWxkVmFsdWVQYWlyKFxuICAgIGZpZWxkOiBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBVaW50OEFycmF5XG4gICk6IGdycGNDYWNoZS5fRGljdGlvbmFyeUZpZWxkVmFsdWVQYWlyW10ge1xuICAgIHJldHVybiBbXG4gICAgICBuZXcgZ3JwY0NhY2hlLl9EaWN0aW9uYXJ5RmllbGRWYWx1ZVBhaXIoe1xuICAgICAgICBmaWVsZDogZmllbGQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIH0pLFxuICAgIF07XG4gIH1cbn1cbiJdfQ==